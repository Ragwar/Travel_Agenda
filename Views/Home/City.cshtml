@{
    ViewData["Title"] = "Activities";
    var apiKey = ViewData["GoogleApiKey"];
    var scheduleId = ViewBag.Schedule.Schedule_Id;
}
@await Html.PartialAsync("_ProgressFlowChart")

<div class="form-group">
    <input type="text" id="searchBox" class="form-control" placeholder="Search for a city" />
    <button id="submitCityButton" class="btn btn-primary mt-2">Save City</button>
</div>

<h2>Top Locations in <span id="selectedCityName">...</span></h2>
<div id="locations" class="mt-4"></div>

<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places,geometry"></script>
<script>
    window.currentProgressStep = 'city';
    const scheduleId = '@scheduleId'; // Pass the Schedule_Id to JavaScript
    let selectedPlace = null;

    // Function to Fetch and Display Top Locations
    function fetchTopLocations(location, viewport) {
        const service = new google.maps.places.PlacesService(document.createElement("div"));
        const types = ["restaurant", "hotel", "park", "museum"];
        const resultsContainer = document.getElementById("locations");
        resultsContainer.innerHTML = ""; // Clear previous results

        // Calculate radius based on the viewport
        let radius = 5000; // Default radius
        if (viewport) {
            const bounds = new google.maps.LatLngBounds(
                viewport.southwest,
                viewport.northeast
            );
            const center = bounds.getCenter();
            const diagonalPoint = bounds.getNorthEast();

            // Calculate diagonal distance in meters
            radius = google.maps.geometry.spherical.computeDistanceBetween(center, diagonalPoint);
        }

        console.log(`Using radius: ${Math.round(radius)} meters for search.`);

        // Fetch Top Locations for Each Type
        types.forEach(type => {
            const request = {
                location: location,
                radius: radius, // Dynamic radius
                type: type,
            };

            service.nearbySearch(request, (results, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK && results.length) {
                    const filteredResults = results
                        .filter(result => result.rating && result.user_ratings_total) // Ensure rating and reviews exist
                        .sort((a, b) => b.user_ratings_total - a.user_ratings_total || b.rating - a.rating); // Sort by reviews first, then rating

                    // Display Top 3 Results
                    const section = document.createElement("div");
                    section.classList.add("mt-3");
                    section.innerHTML = `<h3>Top ${type.charAt(0).toUpperCase() + type.slice(1)}s</h3>`;
                    filteredResults.slice(0, 3).forEach(result => {
                        const photoUrl = result.photos && result.photos.length > 0
                            ? result.photos[0].getUrl({ maxWidth: 200, maxHeight: 200 })
                            : "https://via.placeholder.com/200?text=No+Image";

                        const item = document.createElement("div");
                        item.classList.add("mb-3");
                        item.innerHTML = `
                            <div style="display: flex; align-items: center;">
                                <img src="${photoUrl}" alt="${result.name}" style="width: 100px; height: 100px; margin-right: 15px; border-radius: 8px;">
                                <div>
                                    <strong>${result.name}</strong><br>
                                    Rating: ${result.rating} (${result.user_ratings_total} reviews)
                                </div>
                            </div>
                        `;
                        section.appendChild(item);
                    });
                    resultsContainer.appendChild(section);
                } else {
                    console.warn(`No results found for type: ${type}`);
                }
            });
        });
    }


    // Initialize Autocomplete
    function initAutocomplete() {
        const input = document.getElementById("searchBox");

        const autocomplete = new google.maps.places.Autocomplete(input, {
            types: ["(cities)"],
        });

        autocomplete.addListener("place_changed", () => {
            const place = autocomplete.getPlace();

            if (!place.geometry) {
                alert("No details available for the selected location.");
                return;
            }

            selectedPlace = {
                name: place.name,
                placeId: place.place_id,
                location: place.geometry.location
            };

            document.getElementById("selectedCityName").textContent = selectedPlace.name;

            // Fetch top locations based on city
            fetchTopLocations(selectedPlace.location, place.geometry.viewport);
        });
    }

    // Save City to the Server
    document.getElementById("submitCityButton").addEventListener("click", () => {
        if (!selectedPlace) {
            alert("Please select a city before submitting.");
            return;
        }

        if (!scheduleId) {
            alert("Schedule ID is not available.");
            return;
        }

        const payload = {
            ...selectedPlace,
            scheduleId: scheduleId // Include the Schedule_Id in the payload
        };

        fetch('/Home/SaveCity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        })
            .then(response => {
                if (response.ok) {
                    // Redirect to the And view with ScheduleId and PlaceId
                    const redirectUrl = `/Home/Residence?id=${scheduleId}`;
                    window.location.href = redirectUrl;
                } else {
                    alert("Failed to save city.");
                }
            })
            .catch(error => console.error('Error:', error));

    });

    // Initialize Autocomplete on Page Load
    google.maps.event.addDomListener(window, "load", initAutocomplete);
</script>
