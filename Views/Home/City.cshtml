@{
    ViewData["Title"] = "Activities";
    var apiKey = ViewData["GoogleApiKey"];
    var scheduleId = ViewBag.Schedule.Schedule_Id;
}
@await Html.PartialAsync("_ProgressFlowChart")

<div class="form-group">
    <input type="text" id="searchBox" class="form-control" placeholder="Search for a city" />
    <button id="submitCityButton" class="btn btn-primary mt-2">Save City</button>
</div>

<h2>Top Locations in <span id="selectedCityName">...</span></h2>
<div id="locations" class="mt-4"></div>

<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places,geometry"></script>
<script>
    window.currentProgressStep = 'city';
    const scheduleId = '@scheduleId';
    let selectedPlace = null;
    const googleApiKey = '@apiKey';

    // Fast image loader with Google Maps Static API fallback
    class FastImageLoader {
        constructor() {
            this.queue = [];
            this.isProcessing = false;
            this.maxConcurrent = 3;
            this.activeLoads = 0;
            this.loadDelay = 300;
        }

        addToQueue(photoUrl, placeName, placeLocation, container) {
            this.queue.push({ photoUrl, placeName, placeLocation, container });
            this.processQueue();
        }

        async processQueue() {
            if (this.isProcessing || this.queue.length === 0) {
                return;
            }

            this.isProcessing = true;

            while (this.queue.length > 0 && this.activeLoads < this.maxConcurrent) {
                const item = this.queue.shift();
                this.loadImageFast(item);
                await this.delay(this.loadDelay);
            }

            this.isProcessing = false;
        }

        loadImageFast({ photoUrl, placeName, placeLocation, container }) {
            this.activeLoads++;

            const cleanup = () => {
                this.activeLoads--;
                this.processQueue();
            };

            if (photoUrl) {
                const img = new Image();
                let timeoutId;

                const onSuccess = () => {
                    clearTimeout(timeoutId);
                    img.style.width = "100px";
                    img.style.height = "100px";
                    img.style.borderRadius = "8px";
                    img.style.objectFit = "cover";
                    img.alt = placeName;

                    container.innerHTML = '';
                    container.appendChild(img);
                    cleanup();
                };

                const onError = () => {
                    clearTimeout(timeoutId);
                    console.log(`Using map view for ${placeName}`);
                    this.createMapView(placeName, placeLocation, container);
                    cleanup();
                };

                timeoutId = setTimeout(onError, 2000);

                img.onload = onSuccess;
                img.onerror = onError;
                img.src = photoUrl;
            } else {
                this.createMapView(placeName, placeLocation, container);
                cleanup();
            }
        }

        createMapView(placeName, placeLocation, container) {
            if (!placeLocation) {
                this.createFallbackImage(placeName, container);
                return;
            }

            const lat = placeLocation.lat();
            const lng = placeLocation.lng();

            const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?` +
                `center=${lat},${lng}&` +
                `zoom=17&` +
                `size=100x100&` +
                `maptype=roadmap&` +
                `markers=color:red%7Clabel:•%7C${lat},${lng}&` +
                `style=feature:poi|visibility:on&` +
                `style=feature:transit|visibility:simplified&` +
                `key=${googleApiKey}`;

            const img = document.createElement("img");
            img.src = mapUrl;
            img.style.width = "100px";
            img.style.height = "100px";
            img.style.borderRadius = "8px";
            img.style.border = "2px solid #007bff";
            img.alt = `Map view of ${placeName}`;
            img.title = `Location: ${placeName}`;

            img.onload = () => {
                container.innerHTML = '';
                container.appendChild(img);
            };

            img.onerror = () => {
                this.createFallbackImage(placeName, container);
            };
        }

        createFallbackImage(placeName, container) {
            container.innerHTML = `
                    <div style="
                        width: 100px;
                        height: 100px;
                        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                        border-radius: 8px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        color: white;
                        font-size: 24px;
                        border: 2px solid #198754;
                    ">
                        📍
                    </div>
                `;
        }

        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    }

    const imageLoader = new FastImageLoader();

    function createImageContainer(placeName) {
        const container = document.createElement("div");
        container.style.width = "100px";
        container.style.height = "100px";
        container.style.marginRight = "15px";
        container.style.display = "inline-block";
        container.style.position = "relative";
        container.style.backgroundColor = "#f8f9fa";
        container.style.borderRadius = "8px";

        container.innerHTML = `
                <div style="
                    width: 100%;
                    height: 100%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: #6c757d;
                    font-size: 12px;
                    background: #e9ecef;
                    border-radius: 8px;
                ">
                    ⏳
                </div>
            `;

        return container;
    }

    function getOptimizedPhotoUrl(photo) {
        if (!photo) return null;

        try {
            return photo.getUrl({
                maxWidth: 100,
                maxHeight: 100
            });
        } catch (error) {
            console.error('Error getting photo URL:', error);
            return null;
        }
    }

    function isHotel(place) {
        if (!place.types) return false;

        const hotelTypes = [
            'lodging',
            'hotel',
            'resort',
            'hostel',
            'motel',
            'bed_and_breakfast',
            'guest_house',
            'serviced_apartment'
        ];

        return place.types.some(type => hotelTypes.includes(type));
    }

    function filterRestaurants(results) {
        return results.filter(place => {
            if (isHotel(place)) {
                console.log(`Excluding ${place.name} from restaurants (it's a hotel)`);
                return false;
            }
            return true;
        });
    }

    async function fetchTopLocations(location, viewport) {
        const resultsContainer = document.getElementById("locations");
        resultsContainer.innerHTML = "";

        const cityName = selectedPlace.name;
        console.log(`Searching for top locations in ${cityName}`);

        const categories = [
            {
                type: "restaurant",
                searchTerms: [
                    `best restaurants ${cityName}`,
                    `top rated restaurants ${cityName}`,
                    `most popular restaurants ${cityName}`
                ]
            },
            {
                type: "hotel",
                searchTerms: [
                    `best hotels ${cityName}`,
                    `top rated hotels ${cityName}`,
                    `luxury hotels ${cityName}`
                ]
            },
            {
                type: "park",
                searchTerms: [
                    `popular parks ${cityName}`,
                    `best parks ${cityName}`,
                    `top attractions parks ${cityName}`
                ]
            },
            {
                type: "museum",
                searchTerms: [
                    `best museums ${cityName}`,
                    `top museums ${cityName}`,
                    `popular museums ${cityName}`
                ]
            }
        ];

        for (let categoryIndex = 0; categoryIndex < categories.length; categoryIndex++) {
            const category = categories[categoryIndex];

            setTimeout(async () => {
                console.log(`Processing ${category.type} for ${cityName}`);

                const section = document.createElement("div");
                section.classList.add("mt-3");
                section.innerHTML = `
                        <h3>Top ${category.type.charAt(0).toUpperCase() + category.type.slice(1)}s</h3>
                        <div class="loading-message" style="color: #666; font-style: italic;">
                            🔍 Searching for the most reviewed ${category.type}s in ${cityName}...
                        </div>
                    `;
                resultsContainer.appendChild(section);

                const service = new google.maps.places.PlacesService(document.createElement("div"));
                let allResults = [];

                const nearbyRequest = {
                    location: location,
                    radius: 15000,
                    type: category.type,
                };

                try {
                    const nearbyResults = await new Promise((resolve) => {
                        service.nearbySearch(nearbyRequest, (results, status) => {
                            if (status === google.maps.places.PlacesServiceStatus.OK) {
                                resolve(results || []);
                            } else {
                                resolve([]);
                            }
                        });
                    });

                    allResults.push(...nearbyResults);

                    for (const searchTerm of category.searchTerms) {
                        const textResults = await new Promise((resolve) => {
                            service.textSearch({
                                query: searchTerm,
                                location: location,
                                radius: 20000
                            }, (results, status) => {
                                if (status === google.maps.places.PlacesServiceStatus.OK) {
                                    resolve(results || []);
                                } else {
                                    resolve([]);
                                }
                            });
                        });

                        allResults.push(...textResults);
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }

                    const uniqueResults = allResults.filter((place, index, self) =>
                        index === self.findIndex(p => p.place_id === place.place_id)
                    );

                    let filteredResults = uniqueResults
                        .filter(result => result.rating && result.user_ratings_total && result.user_ratings_total > 10);

                    if (category.type === "restaurant") {
                        filteredResults = filterRestaurants(filteredResults);
                    }

                    filteredResults = filteredResults
                        .sort((a, b) => {
                            const reviewDiff = b.user_ratings_total - a.user_ratings_total;
                            if (Math.abs(reviewDiff) > 50) return reviewDiff;
                            return b.rating - a.rating;
                        });

                    const loadingMsg = section.querySelector('.loading-message');
                    if (loadingMsg) loadingMsg.remove();

                    if (filteredResults.length === 0) {
                        section.innerHTML += `<p style="color: #999; font-style: italic;">No highly-reviewed ${category.type}s found in this area.</p>`;
                        return;
                    }

                    const topResults = filteredResults.slice(0, 5);

                    topResults.forEach((result, index) => {
                        const photoUrl = result.photos && result.photos.length > 0
                            ? getOptimizedPhotoUrl(result.photos[0])
                            : null;

                        const item = document.createElement("div");
                        item.classList.add("mb-3");
                        item.style.padding = "10px";
                        item.style.border = "1px solid #dee2e6";
                        item.style.borderRadius = "8px";
                        item.style.backgroundColor = "#f8f9fa";

                        const container = document.createElement("div");
                        container.style.display = "flex";
                        container.style.alignItems = "center";

                        const imageContainer = createImageContainer(result.name);

                        const textDiv = document.createElement("div");
                        const priceDisplay = result.price_level ? `<br><small style="color: #28a745;">💰 ${'$'.repeat(result.price_level)}</small>` : '';

                        textDiv.innerHTML = `
                                <strong>${result.name}</strong>
                                <br>
                                <span style="color: #666;">⭐ ${result.rating} (${result.user_ratings_total.toLocaleString()} reviews)</span><br>
                                <small style="color: #999;">📍 ${result.formatted_address || result.vicinity || 'Location available'}</small>
                                ${priceDisplay}
                            `;

                        container.appendChild(imageContainer);
                        container.appendChild(textDiv);
                        item.appendChild(container);
                        section.appendChild(item);

                        imageLoader.addToQueue(
                            photoUrl,
                            result.name,
                            result.geometry.location,
                            imageContainer
                        );
                    });

                    console.log(`Found ${topResults.length} top ${category.type}s for ${cityName}`);

                } catch (error) {
                    console.error(`Error fetching ${category.type}s:`, error);
                    const loadingMsg = section.querySelector('.loading-message');
                    if (loadingMsg) {
                        loadingMsg.textContent = `Error loading ${category.type}s. Please try again.`;
                        loadingMsg.style.color = '#dc3545';
                    }
                }

            }, categoryIndex * 1000);
        }
    }

    function initAutocomplete() {
        const input = document.getElementById("searchBox");

        const autocomplete = new google.maps.places.Autocomplete(input, {
            types: ["(cities)"],
        });

        autocomplete.addListener("place_changed", () => {
            const place = autocomplete.getPlace();

            if (!place.geometry) {
                alert("No details available for the selected location.");
                return;
            }

            selectedPlace = {
                name: place.name,
                placeId: place.place_id,
                location: place.geometry.location
            };

            document.getElementById("selectedCityName").textContent = selectedPlace.name;
            fetchTopLocations(selectedPlace.location, place.geometry.viewport);
        });
    }

    document.getElementById("submitCityButton").addEventListener("click", () => {
        if (!selectedPlace) {
            alert("Please select a city before submitting.");
            return;
        }

        if (!scheduleId) {
            alert("Schedule ID is not available.");
            return;
        }

        const payload = {
            ...selectedPlace,
            scheduleId: scheduleId
        };

        fetch('/Home/SaveCity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        })
            .then(response => {
                if (response.ok) {
                    const redirectUrl = `/Home/Residence?id=${scheduleId}`;
                    window.location.href = redirectUrl;
                } else {
                    alert("Failed to save city.");
                }
            })
            .catch(error => console.error('Error:', error));
    });

    google.maps.event.addDomListener(window, "load", initAutocomplete);
</script>