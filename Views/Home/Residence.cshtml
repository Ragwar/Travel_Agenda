<!DOCTYPE html>
@{
    ViewData["Title"] = "Select Residence";
    var apiKey = ViewData["GoogleApiKey"];
    var scheduleId = ViewBag.Schedule.Schedule_Id;
    var cityPlaceId = ViewBag.Schedule.Place_Id;
    var cityName = ViewBag.Schedule.City_Name;
}
<html>
<head>
    <meta charset="utf-8" />
    <title>Select Residence</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        /* Hotels Tab */
        #hotel .hotel-container {
            display: flex;
            gap: 20px;
            height: 70vh; /* taller than before */
        }

        #hotel .hotel-list-panel {
            width: 50%;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        #hotel #filtersSection {
            margin-bottom: 10px;
        }

        #hotel #toggleFiltersBtn {
            margin-bottom: 10px;
        }

        #hotel .hotel-list {
            flex: 1;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px;
        }

        .hotel-item {
            border: 1px solid #ccc;
            border-radius: 6px;
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
        }

        .hotel-header {
            display: flex;
            align-items: center;
            padding: 6px;
            cursor: pointer;
        }

            .hotel-header img {
                width: 80px;
                height: 80px;
                object-fit: cover;
                margin-right: 10px;
                border-radius: 4px;
            }

            .hotel-header .info {
                flex: 1;
            }

                .hotel-header .info strong {
                    display: block;
                    margin-bottom: 4px;
                }

                .hotel-header .info small {
                    display: block;
                    color: #666;
                }

        .hotel-details {
            display: none;
            padding: 8px;
            border-top: 1px solid #ddd;
            background: #f9f9f9;
            font-size: 14px;
        }

            .hotel-details h5 {
                margin-top: 8px;
            }

            .hotel-details .tag {
                background: #eee;
                padding: 2px 6px;
                margin: 2px;
                border-radius: 3px;
                font-size: 12px;
                display: inline-block;
            }

        #hotel .hotel-map-panel {
            width: 50%;
            display: flex;
            flex-direction: column;
        }

        #hotel #map {
            width: 100%;
            height: 70vh; /* match container height */
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #selectHotelBtn {
            margin-top: 10px;
            align-self: center;
        }

        /* Address Tab */
        #address #addressInput {
            width: 100%;
        }

        #addressError {
            color: #c00;
            margin-top: -0.5rem;
            margin-bottom: 0.75rem;
            display: none;
        }

        #mapAddress {
            width: 100%;
            height: 400px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .info-panel {
            border: 1px solid #ccc;
            padding: 10px;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>Select Residence</h1>
        <input type="hidden" id="scheduleId" value="@scheduleId" />

        <ul class="nav nav-tabs">
            <li class="nav-item">
                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#hotel">Hotels</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#address">Address</button>
            </li>
        </ul>

        <div class="tab-content mt-3">
            <!-- Hotels Tab -->
            <div class="tab-pane fade show active" id="hotel">
                <div class="hotel-container">
                    <div class="hotel-list-panel">
                        <button id="toggleFiltersBtn" class="btn btn-secondary btn-sm">See Filters</button>
                        <!-- filters hidden by default -->
                        <div id="filtersSection" class="d-none">
                            <div class="mb-2">
                                <label class="form-label">Filter by Budget:</label>
                                <select id="budgetFilter" class="form-select form-select-sm">
                                    <option value="all">All</option>
                                    <option value="free">No cost</option>
                                    <option value="low">Low</option>
                                    <option value="moderate">Moderate</option>
                                    <option value="high">High</option>
                                </select>
                            </div>
                        </div>
                        <div id="hotelListPanel" class="hotel-list"></div>
                    </div>
                    <div class="hotel-map-panel">
                        <div id="map"></div>
                        <button id="selectHotelBtn" class="btn btn-primary" disabled>Select Hotel</button>
                    </div>
                </div>
            </div>

            <!-- Address Tab -->
            <div class="tab-pane fade" id="address">
                <input id="addressInput" class="form-control mb-2" placeholder="Enter full address and click Go" />
                <div id="addressError">Address not found or invalid.</div>
                <button id="geocodeBtn" class="btn btn-secondary mb-3">Go</button>
                <div id="mapAddress"></div>
                <div id="addressInfo" class="info-panel d-none"></div>
                <button id="saveAddressBtn" class="btn btn-primary mt-3" disabled>Save Address</button>
            </div>
        </div>
    </div>

    <script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places"></script>
    <script>
        let map, service, addrMap, geocoder, addressMarker, geocodedResult;
        let selectedHotel = null;
        const scheduleId = document.getElementById('scheduleId').value;
        const CITY_PLACE_ID = "@cityPlaceId";
        const CITY_NAME = "@cityName";

        // infinite scroll state
        let nextPageToken = null;
        let loading = false;
        let allHotels = [];

        function initMap() {
            geocoder = new google.maps.Geocoder();
            service = new google.maps.places.PlacesService(document.createElement('div'));

            service.getDetails({ placeId: CITY_PLACE_ID, fields: ['geometry'] }, (city, st) => {
                if (st !== google.maps.places.PlacesServiceStatus.OK) return;
                const center = city.geometry.location;

                map = new google.maps.Map(document.getElementById('map'), { center, zoom: 13 });
                service = new google.maps.places.PlacesService(map);

                addrMap = new google.maps.Map(document.getElementById('mapAddress'), { center, zoom: 13 });
                enableMapClickForAddress();

                // load only first page; further pages on scroll
                loadHotelsPage();
            });

            document.getElementById('hotelListPanel').addEventListener('scroll', () => {
                const panel = document.getElementById('hotelListPanel');
                if (!loading && panel.scrollTop + panel.clientHeight >= panel.scrollHeight - 50) {
                    if (nextPageToken) loadHotelsPage(nextPageToken);
                }
            });
        }

        function loadHotelsPage(pageToken) {
            loading = true;
            const params = {
                location: map.getCenter(),
                radius: 5000,
                type: 'lodging'
            };
            if (pageToken) params.pageToken = pageToken;

            service.nearbySearch(params, (results, status, pagination) => {
                loading = false;
                if (status !== google.maps.places.PlacesServiceStatus.OK) return;

                allHotels = allHotels.concat(results);
                allHotels.sort((a, b) => (b.user_ratings_total || 0) - (a.user_ratings_total || 0));
                renderAllHotels();

                // only store nextPageToken, do not auto-fetch
                if (pagination && pagination.hasNextPage) {
                    nextPageToken = pagination.nextPage();
                } else {
                    nextPageToken = null;
                }
            });
        }

        function renderAllHotels() {
            const panel = document.getElementById('hotelListPanel');
            panel.innerHTML = '';
            allHotels.forEach(place => {
                const item = document.createElement('div');
                item.className = 'hotel-item';

                const rating = place.rating || 0;
                const reviews = place.user_ratings_total || 0;
                const price = place.price_level || 0;

                const header = document.createElement('div');
                header.className = 'hotel-header';
                header.innerHTML = `
                                            <img src="${place.photos?.[0]?.getUrl({ maxWidth: 100 }) || 'https://via.placeholder.com/80'}">
                                            <div class="info">
                                              <strong>${place.name}</strong><br>
                                              ${rating.toFixed(1)} ★ (${reviews})<br>
                                              <small>${price ? '$'.repeat(price) : 'N/A'}</small>
                                            </div>`;
                header.addEventListener('click', () => {
                    map.panTo(place.geometry.location);
                    map.setZoom(16);
                    toggleHotelDetails(header.nextSibling);
                    selectedHotel = place;
                    document.getElementById('selectHotelBtn').disabled = false;
                });
                item.appendChild(header);

                const details = document.createElement('div');
                details.className = 'hotel-details';
                details.innerHTML = '<em>Loading details…</em>';
                item.appendChild(details);
                panel.appendChild(item);

                service.getDetails({
                    placeId: place.place_id,
                    fields: ['formatted_address', 'formatted_phone_number', 'website', 'opening_hours', 'reviews', 'editorial_summary', 'types']
                }, (full, st2) => {
                    if (st2 !== google.maps.places.PlacesServiceStatus.OK) {
                        details.innerHTML = '<p><em>Details unavailable.</em></p>';
                        return;
                    }
                    const tags = (full.types || [])
                        .filter(t => ['no_smoking', 'free_wifi', 'parking', 'wheelchair_accessible'].includes(t))
                        .map(t => `<span class="tag">${t.replace(/_/g, ' ')}</span>`).join(' ') || 'None';
                    const hours = full.opening_hours?.weekday_text
                        ? `<h5>Hours</h5><ul>${full.opening_hours.weekday_text.map(d => `<li>${d}</li>`).join('')}</ul>` : '';
                    const revs = (full.reviews || []).slice(0, 2)
                        .map(r => `<div><strong>${r.author_name}</strong> (${r.rating}★)<p>${r.text}</p></div>`).join('') || '<em>No reviews.</em>';
                    details.innerHTML = `
                                                <p><strong>Address:</strong> ${full.formatted_address}</p>
                                                <p><strong>Phone:</strong> ${full.formatted_phone_number || 'N/A'}</p>
                                                <p><strong>Website:</strong> ${full.website ? `<a href="${full.website}" target="_blank">${full.website}</a>` : 'N/A'}</p>
                                                ${hours}
                                                <h5>Tags</h5><div>${tags}</div>
                                                <h5>Top Reviews</h5><div>${revs}</div>
                                                <h5>About</h5><p>${full.editorial_summary || 'No description.'}</p>
                                            `;
                });
            });
        }

        function toggleHotelDetails(el) {
            document.querySelectorAll('#hotel .hotel-details')
                .forEach(d => { if (d !== el) d.style.display = 'none'; });
            el.style.display = el.style.display === 'block' ? 'none' : 'block';
        }

        document.getElementById('selectHotelBtn').addEventListener('click', () => {
            fetch('/Home/SaveResidence', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ schedule_Id: scheduleId, hotel_Id: selectedHotel.place_id, hotel_Name: selectedHotel.name })
            }).then(r => r.ok
                ? window.location.href = `/Home/LocationsAndActivities?id=${scheduleId}`
                : alert('Save failed')
            );
        });

        // toggle filters
        document.getElementById('toggleFiltersBtn').addEventListener('click', () => {
            const fs = document.getElementById('filtersSection');
            fs.classList.toggle('d-none');
            document.getElementById('toggleFiltersBtn').textContent =
                fs.classList.contains('d-none') ? 'See Filters' : 'Hide Filters';
        });

        // ADDRESS TAB
        function enableMapClickForAddress() {
            addrMap.addListener('click', e => {
                geocoder.geocode({ location: e.latLng }, (res, st) => {
                    if (st === 'OK' && res[0]) applyAddressFromClick(res[0], e.latLng);
                });
            });
        }
        function applyAddressFromClick(result, loc) {
            geocodedResult = result;
            if (addressMarker) addressMarker.setMap(null);
            addressMarker = new google.maps.Marker({ map: addrMap, position: loc });
            addrMap.panTo(loc);
            document.getElementById('addressInfo').innerHTML = `<p><strong>Address:</strong><br>${result.formatted_address}</p>`;
            document.getElementById('addressInfo').classList.remove('d-none');
            document.getElementById('saveAddressBtn').disabled = false;
        }
        document.getElementById('geocodeBtn').addEventListener('click', () => {
            clearAddressError();
            let a = document.getElementById('addressInput').value.trim();
            if (!a) { showAddressError('Please enter an address.'); return; }
            if (!a.toLowerCase().includes(CITY_NAME.toLowerCase())) a += ', ' + CITY_NAME;
            geocoder.geocode({ address: a }, (res, st) => {
                if (st !== 'OK' || !res.length) { showAddressError('Address not found.'); return; }
                const r = res[0];
                const hasStreet = r.address_components.some(c => c.types.includes('street_number') || c.types.includes('route'));
                if (!hasStreet) { showAddressError('Specify street number & name.'); return; }
                geocodedResult = r;
                if (addressMarker) addressMarker.setMap(null);
                addressMarker = new google.maps.Marker({ map: addrMap, position: r.geometry.location });
                addrMap.panTo(r.geometry.location);
                document.getElementById('addressInfo').innerHTML = `<p><strong>Address:</strong><br>${r.formatted_address}</p>`;
                document.getElementById('addressInfo').classList.remove('d-none');
                document.getElementById('saveAddressBtn').disabled = false;
            });
        });
        document.getElementById('saveAddressBtn').addEventListener('click', () => {
            const pid = geocodedResult.place_id, fn = geocodedResult.formatted_address;
            fetch('/Home/SaveResidence', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ schedule_Id: scheduleId, hotel_Id: pid, hotel_Name: fn })
            }).then(r => r.ok
                ? window.location.href = `/Home/LocationsAndActivities?id=${scheduleId}`
                : showAddressError('Save failed.')
            );
        });
        function showAddressError(m) { const el = document.getElementById('addressError'); el.textContent = m; el.style.display = 'block'; }
        function clearAddressError() { document.getElementById('addressError').style.display = 'none'; }

        // filter reload hotels
        document.getElementById('budgetFilter').addEventListener('change', () => {
            allHotels = []; nextPageToken = null; loadHotelsPage();
        });

        window.addEventListener('load', initMap);
    </script>
</body>
</html>