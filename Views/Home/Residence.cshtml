@{
    ViewData["Title"] = "Select Residence";
    var apiKey = ViewData["GoogleApiKey"];
    var scheduleId = ViewBag.Schedule.ScheduleId;
    var cityPlaceId = ViewBag.Schedule.PlaceId;
    var cityName = ViewBag.Schedule.CityName;
}

<link rel="stylesheet" href="~/css/Residence.css" />
@await Html.PartialAsync("_ProgressFlowChart")
<div class="container mt-4">

    
    <input type="hidden" id="scheduleId" value="@scheduleId" />

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#hotel">Hotels</button>
        </li>
        <li class="nav-item">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#address">Address</button>
        </li>
    </ul>

    <div class="tab-content mt-3">
        <!-- Hotels Tab -->
        <div class="tab-pane fade show active" id="hotel">
            <div class="hotel-container">
                <div class="hotel-list-panel">
                    <div id="hotelListPanel" class="hotel-list">
                        <div class="loading-indicator">Loading hotels...</div>
                    </div>
                </div>
                <div class="hotel-map-panel">
                    <button id="selectHotelBtn" class="btn btn-primary" disabled>Select Hotel</button>
                    <div id="map"></div>

                </div>
            </div>
        </div>

        <!-- Address Tab -->
        <div class="tab-pane fade" id="address">
            <div class="address-input-row">
                <div class="search-section">
                    <input id="addressInput" class="form-control search-input" placeholder="Enter full address and click Go" />
                    <button id="geocodeBtn" class="btn btn-secondary go-btn">Go</button>
                </div>
                <button id="saveAddressBtn" class="btn btn-primary save-btn" disabled>Save Address</button>
            </div>
            <div id="addressError">Address not found or invalid.</div>
            <div id="mapAddress"></div>
            <div id="addressInfo" class="info-panel d-none"></div>
        </div>
    </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places"></script>
<script>
    window.currentProgressStep = 'residence';

    let map, service, addrMap, geocoder, addressMarker, geocodedResult;
    let selectedHotel = null;
    const scheduleId = document.getElementById('scheduleId').value;
    const CITY_PLACE_ID = "@cityPlaceId";
    const CITY_NAME = "@cityName";
    const googleApiKey = "@apiKey";

    // infinite scroll state
    let nextPageToken = null;
    let loading = false;
    let allHotels = [];
    let isInitialLoad = true;
    let renderedHotelIds = new Set(); // Track which hotels have been rendered

    // Fast image loader with Google Maps Static API fallback (same as city view)
    class FastImageLoader {
        constructor() {
            this.queue = [];
            this.isProcessing = false;
            this.maxConcurrent = 3;
            this.activeLoads = 0;
            this.loadDelay = 300;
        }

        addToQueue(photoUrl, placeName, placeLocation, container) {
            this.queue.push({ photoUrl, placeName, placeLocation, container });
            this.processQueue();
        }

        async processQueue() {
            if (this.isProcessing || this.queue.length === 0) {
                return;
            }

            this.isProcessing = true;

            while (this.queue.length > 0 && this.activeLoads < this.maxConcurrent) {
                const item = this.queue.shift();
                this.loadImageFast(item);
                await this.delay(this.loadDelay);
            }

            this.isProcessing = false;
        }

        loadImageFast({ photoUrl, placeName, placeLocation, container }) {
            this.activeLoads++;

            const cleanup = () => {
                this.activeLoads--;
                this.processQueue();
            };

            if (photoUrl) {
                const img = new Image();
                let timeoutId;

                const onSuccess = () => {
                    clearTimeout(timeoutId);
                    img.style.width = "80px";
                    img.style.height = "80px";
                    img.style.borderRadius = "8px";
                    img.style.objectFit = "cover";
                    img.alt = placeName;

                    container.innerHTML = '';
                    container.appendChild(img);
                    cleanup();
                };

                const onError = () => {
                    clearTimeout(timeoutId);
                    console.log(`Using map view for ${placeName}`);
                    this.createMapView(placeName, placeLocation, container);
                    cleanup();
                };

                timeoutId = setTimeout(onError, 2000);

                img.onload = onSuccess;
                img.onerror = onError;
                img.src = photoUrl;
            } else {
                this.createMapView(placeName, placeLocation, container);
                cleanup();
            }
        }

        createMapView(placeName, placeLocation, container) {
            if (!placeLocation) {
                this.createFallbackImage(placeName, container);
                return;
            }

            const lat = placeLocation.lat();
            const lng = placeLocation.lng();

            const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?` +
                `center=${lat},${lng}&` +
                `zoom=17&` +
                `size=80x80&` +
                `maptype=roadmap&` +
                `markers=color:red%7Clabel:•%7C${lat},${lng}&` +
                `style=feature:poi|visibility:on&` +
                `style=feature:transit|visibility:simplified&` +
                `key=${googleApiKey}`;

            const img = document.createElement("img");
            img.src = mapUrl;
            img.style.width = "80px";
            img.style.height = "80px";
            img.style.borderRadius = "8px";
            img.style.border = "2px solid #007bff";
            img.alt = `Map view of ${placeName}`;
            img.title = `Location: ${placeName}`;

            img.onload = () => {
                container.innerHTML = '';
                container.appendChild(img);
            };

            img.onerror = () => {
                this.createFallbackImage(placeName, container);
            };
        }

        createFallbackImage(placeName, container) {
            container.innerHTML = `
                                <div style="
                                    width: 80px;
                                    height: 80px;
                                    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                                    border-radius: 8px;
                                    display: flex;
                                    align-items: center;
                                    justify-content: center;
                                    color: white;
                                    font-size: 20px;
                                    border: 2px solid #0056b3;
                                ">
                                    🏨
                                </div>
                            `;
        }

        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    }

    const imageLoader = new FastImageLoader();

    function createImageContainer(placeName) {
        const container = document.createElement("div");
        container.className = "hotel-image-container";

        container.innerHTML = `
                            <div class="loading-placeholder">
                                ⏳
                            </div>
                        `;

        return container;
    }

    function getOptimizedPhotoUrl(photo) {
        if (!photo) return null;

        try {
            return photo.getUrl({
                maxWidth: 80,
                maxHeight: 80
            });
        } catch (error) {
            console.error('Error getting photo URL:', error);
            return null;
        }
    }

    function initMap() {
        geocoder = new google.maps.Geocoder();
        service = new google.maps.places.PlacesService(document.createElement('div'));

        service.getDetails({ placeId: CITY_PLACE_ID, fields: ['geometry'] }, (city, st) => {
            if (st !== google.maps.places.PlacesServiceStatus.OK) return;
            cityViewport = city.geometry.viewport;  // save viewport
            const center = city.geometry.location;

            map = new google.maps.Map(document.getElementById('map'), { center, zoom: 13 });
            service = new google.maps.places.PlacesService(map);

            addrMap = new google.maps.Map(document.getElementById('mapAddress'), { center, zoom: 13 });
            enableMapClickForAddress();

            // Load initial batch of hotels
            loadInitialHotels();
        });

        document.getElementById('hotelListPanel').addEventListener('scroll', () => {
            const panel = document.getElementById('hotelListPanel');
            if (!loading && panel.scrollTop + panel.clientHeight >= panel.scrollHeight - 50) {
                if (nextPageToken) loadHotelsPage(nextPageToken);
            }
        });
    }

    // Load multiple pages initially to get a good sorted list
    function loadInitialHotels() {
        const loadPromises = [];
        let totalPagesToLoad = 3; // Load first 3 pages to get better sorting
        let pagesLoaded = 0;
        let tempToken = null;

        function loadNextBatch() {
            return new Promise((resolve) => {
                const params = {
                    bounds: cityViewport,
                    type: 'lodging',
                    strictBounds: true
                };
                if (tempToken) params.pageToken = tempToken;

                service.nearbySearch(params, (results, status, pagination) => {
                    if (status !== google.maps.places.PlacesServiceStatus.OK) {
                        resolve();
                        return;
                    }

                    // Filter out duplicates and add to allHotels
                    const newUnique = results.filter(r =>
                        !allHotels.some(existing => existing.place_id === r.place_id)
                    );

                    allHotels = allHotels.concat(newUnique);
                    pagesLoaded++;

                    if (pagination && pagination.hasNextPage && pagesLoaded < totalPagesToLoad) {
                        tempToken = pagination.nextPage();
                        // Small delay before next request
                        setTimeout(() => {
                            loadNextBatch().then(resolve);
                        }, 1000);
                    } else {
                        nextPageToken = (pagination && pagination.hasNextPage) ? pagination.nextPage() : null;
                        resolve();
                    }
                });
            });
        }

        loadNextBatch().then(() => {
            // Sort once after loading initial batches
            allHotels.sort((a, b) => (b.user_ratings_total || 0) - (a.user_ratings_total || 0));
            isInitialLoad = false;
            renderAllHotels();
        });
    }

    function loadHotelsPage(pageToken) {
        loading = true;
        const params = {
            bounds: cityViewport,
            type: 'lodging',
            strictBounds: true
        };
        if (pageToken) params.pageToken = pageToken;

        service.nearbySearch(params, (results, status, pagination) => {
            loading = false;
            if (status !== google.maps.places.PlacesServiceStatus.OK) return;

            // filter out any result we've already added
            const newUnique = results.filter(r =>
                !allHotels.some(existing => existing.place_id === r.place_id)
            );

            if (newUnique.length > 0) {
                // Instead of re-sorting everything, insert new hotels in their proper positions
                newUnique.forEach(hotel => {
                    const insertIndex = findInsertPosition(hotel);
                    allHotels.splice(insertIndex, 0, hotel);
                });

                renderNewHotels(newUnique);
            }

            if (pagination && pagination.hasNextPage) {
                nextPageToken = pagination.nextPage();
            } else {
                nextPageToken = null;
            }
        });
    }

    // Find the correct position to insert a new hotel to maintain sort order
    function findInsertPosition(newHotel) {
        const newReviews = newHotel.user_ratings_total || 0;

        for (let i = 0; i < allHotels.length; i++) {
            const existingReviews = allHotels[i].user_ratings_total || 0;
            if (newReviews > existingReviews) {
                return i;
            }
        }
        return allHotels.length;
    }

    // Render only new hotels without disturbing existing ones
    function renderNewHotels(newHotels) {
        const panel = document.getElementById('hotelListPanel');

        newHotels.forEach(place => {
            if (renderedHotelIds.has(place.place_id)) return;

            const insertIndex = allHotels.findIndex(h => h.place_id === place.place_id);
            const item = createHotelItem(place);

            // Insert at correct position
            if (insertIndex === 0) {
                panel.insertBefore(item, panel.firstChild);
            } else if (insertIndex >= panel.children.length) {
                panel.appendChild(item);
            } else {
                panel.insertBefore(item, panel.children[insertIndex]);
            }

            renderedHotelIds.add(place.place_id);
        });
    }

    function renderAllHotels() {
        const panel = document.getElementById('hotelListPanel');
        panel.innerHTML = '';
        renderedHotelIds.clear();

        allHotels.forEach(place => {
            const item = createHotelItem(place);
            panel.appendChild(item);
            renderedHotelIds.add(place.place_id);
        });
    }

    function createHotelItem(place) {
        const item = document.createElement('div');
        item.className = 'hotel-item';

        const rating = place.rating || 0;
        const reviews = place.user_ratings_total || 0;
        const price = place.price_level || 0;

        const header = document.createElement('div');
        header.className = 'hotel-header';

        // Create image container
        const imageContainer = createImageContainer(place.name);

        // Create info div
        const infoDiv = document.createElement('div');
        infoDiv.className = 'info';


        infoDiv.innerHTML = `
                            <strong>${place.name}</strong>
                            <div class="hotel-rating">⭐ ${rating.toFixed(1)} (${reviews.toLocaleString()} reviews)</div>
                        `;

        header.appendChild(imageContainer);
        header.appendChild(infoDiv);

        header.addEventListener('click', () => {
            map.panTo(place.geometry.location);
            map.setZoom(16);
            toggleHotelDetails(header.nextSibling);
            selectedHotel = place;
            document.getElementById('selectHotelBtn').disabled = false;
        });
        item.appendChild(header);

        const details = document.createElement('div');
        details.className = 'hotel-details';
        details.innerHTML = '<em>Loading details…</em>';
        item.appendChild(details);

        // Load image using the fast image loader
        const photoUrl = place.photos && place.photos.length > 0
            ? getOptimizedPhotoUrl(place.photos[0])
            : null;

        imageLoader.addToQueue(
            photoUrl,
            place.name,
            place.geometry.location,
            imageContainer
        );

        service.getDetails({
            placeId: place.place_id,
            fields: ['formatted_address', 'formatted_phone_number', 'website', 'opening_hours', 'reviews', 'editorial_summary', 'types']
        }, (full, st2) => {
            if (st2 !== google.maps.places.PlacesServiceStatus.OK) {
                details.innerHTML = '<p><em>Details unavailable.</em></p>';
                return;
            }
            const tags = (full.types || [])
                .filter(t => ['no_smoking', 'free_wifi', 'parking', 'wheelchair_accessible'].includes(t))
                .map(t => `<span class="tag">${t.replace(/_/g, ' ')}</span>`).join(' ') || '<span class="tag">No special amenities listed</span>';

            const hours = full.opening_hours?.weekday_text
                ? `<h5>Hours</h5><ul>${full.opening_hours.weekday_text.map(d => `<li>${d}</li>`).join('')}</ul>` : '';

            const revs = (full.reviews || []).slice(0, 2)
                .map(r => `<div class="review-item"><strong>${r.author_name}</strong> <span style="color: #ffc107;">⭐ ${r.rating}</span><p style="margin: 4px 0 0 0;">${r.text}</p></div>`).join('') || '<em>No reviews available.</em>';

            details.innerHTML = `
                                <p><strong>📍 Address:</strong> ${full.formatted_address}</p>
                                <p><strong>📞 Phone:</strong> ${full.formatted_phone_number || 'N/A'}</p>
                                <p><strong>🌐 Website:</strong> ${full.website ? `<a href="${full.website}" target="_blank" rel="noopener">${full.website}</a>` : 'N/A'}</p>
                                ${hours}
                                <h5>Amenities</h5><div>${tags}</div>
                                <h5>Recent Reviews</h5><div>${revs}</div>
                                <h5>About</h5><p>${full.editorial_summary?.overview || 'No description available.'}</p>
                            `;
        });

        return item;
    }

    function toggleHotelDetails(el) {
        document.querySelectorAll('#hotel .hotel-details')
            .forEach(d => { if (d !== el) d.style.display = 'none'; });
        el.style.display = el.style.display === 'block' ? 'none' : 'block';
    }

    document.getElementById('selectHotelBtn').addEventListener('click', () => {
        fetch('/Home/SaveResidence', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ scheduleId: scheduleId, hotelId: selectedHotel.placeid, hotelName: selectedHotel.name })
        }).then(r => r.ok
            ? window.location.href = `/Home/LocationsAndActivities?scheduleId=${scheduleId}`
            : alert('Save failed')
        );
    });

    // ADDRESS TAB
    function enableMapClickForAddress() {
        addrMap.addListener('click', e => {
            geocoder.geocode({ location: e.latLng }, (res, st) => {
                if (st === 'OK' && res[0]) applyAddressFromClick(res[0], e.latLng);
            });
        });
    }
    function applyAddressFromClick(result, loc) {
        geocodedResult = result;
        if (addressMarker) addressMarker.setMap(null);
        addressMarker = new google.maps.Marker({ map: addrMap, position: loc });
        addrMap.panTo(loc);
        document.getElementById('addressInfo').innerHTML = `<p><strong>Address:</strong><br>${result.formatted_address}</p>`;
        document.getElementById('addressInfo').classList.remove('d-none');
        document.getElementById('saveAddressBtn').disabled = false;
    }
    document.getElementById('geocodeBtn').addEventListener('click', () => {
        clearAddressError();
        let a = document.getElementById('addressInput').value.trim();
        if (!a) { showAddressError('Please enter an address.'); return; }
        if (!a.toLowerCase().includes(CITY_NAME.toLowerCase())) a += ', ' + CITY_NAME;
        geocoder.geocode({ address: a }, (res, st) => {
            if (st !== 'OK' || !res.length) { showAddressError('Address not found.'); return; }
            const r = res[0];
            const hasStreet = r.address_components.some(c => c.types.includes('street_number') || c.types.includes('route'));
            if (!hasStreet) { showAddressError('Specify street number & name.'); return; }
            geocodedResult = r;
            if (addressMarker) addressMarker.setMap(null);
            addressMarker = new google.maps.Marker({ map: addrMap, position: r.geometry.location });
            addrMap.panTo(r.geometry.location);
            document.getElementById('addressInfo').innerHTML = `<p><strong>Address:</strong><br>${r.formatted_address}</p>`;
            document.getElementById('addressInfo').classList.remove('d-none');
            document.getElementById('saveAddressBtn').disabled = false;
        });
    });
    document.getElementById('saveAddressBtn').addEventListener('click', () => {
        const pid = geocodedResult.place_id, fn = geocodedResult.formatted_address;
        fetch('/Home/SaveResidence', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ scheduleId: scheduleId, hotelId: pid, hotelName: fn })
        }).then(r => r.ok
            ? window.location.href = `/Home/LocationsAndActivities?scheduleId=${scheduleId}`
            : showAddressError('Save failed.')
        );
    });
    function showAddressError(m) { const el = document.getElementById('addressError'); el.textContent = m; el.style.display = 'block'; }
    function clearAddressError() { document.getElementById('addressError').style.display = 'none'; }

    window.addEventListener('load', initMap);
</script>
