@{
    ViewData["Title"] = "Select Residence";
    var apiKey = ViewData["GoogleApiKey"];
    var scheduleId = ViewBag.Schedule.ScheduleId;
    var cityPlaceId = ViewBag.Schedule.PlaceId;
    var cityName = ViewBag.Schedule.CityName;
}

<link rel="stylesheet" href="~/css/Residence.css" />
@await Html.PartialAsync("_ProgressFlowChart")
<div class="container mt-4">

    <input type="hidden" id="scheduleId" value="@scheduleId" />

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#hotel">Hotels</button>
        </li>
        <li class="nav-item">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#address">Address</button>
        </li>
    </ul>

    <div class="tab-content mt-3">
        <!-- Hotels Tab -->
        <div class="tab-pane fade show active" id="hotel">
            <div class="hotel-container">
                <div class="hotel-list-panel">
                    <div id="hotelListPanel" class="hotel-list">
                        <div class="loading-indicator">Loading hotels...</div>
                    </div>
                </div>
                <div class="hotel-map-panel">
                    <button id="selectHotelBtn" class="btn btn-primary" disabled>Select Hotel</button>
                    <div id="map"></div>
                </div>
            </div>
        </div>

        <!-- Address Tab -->
        <div class="tab-pane fade" id="address">
            <div class="address-input-row">
                <div class="search-section">
                    <input id="addressInput" class="form-control search-input" placeholder="Enter full address and click Go" />
                    <button id="geocodeBtn" class="btn btn-secondary go-btn">Go</button>
                </div>
                <button id="saveAddressBtn" class="btn btn-primary save-btn" disabled>Save Address</button>
            </div>
            <div id="addressError">Address not found or invalid.</div>
            <div id="mapAddress"></div>
            <div id="addressInfo" class="info-panel d-none"></div>
        </div>
    </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places"></script>
<script>
    window.currentProgressStep = 'residence';
    const existingHotelName = '@Html.Raw(ViewBag.Schedule?.HotelName ?? "")';
    const existingHotelId = '@Html.Raw(ViewBag.Schedule?.HotelId ?? "")';
    let map, placesService, addrMap, geocoder, addressMarker, geocodedResult;
    let selectedHotel = null;
    const scheduleId = document.getElementById('scheduleId').value;
    const CITY_PLACE_ID = "@cityPlaceId";
    const CITY_NAME = "@cityName";
    const googleApiKey = "@apiKey";

    // Hotel data storage
    let allHotels = [];
    let renderedHotelIds = new Set();
    let loading = false;

    // Fast image loader with Google Maps Static API fallback (same as city view)
    class FastImageLoader {
        constructor() {
            this.queue = [];
            this.isProcessing = false;
            this.maxConcurrent = 3;
            this.activeLoads = 0;
            this.loadDelay = 300;
        }

        addToQueue(photoUrl, placeName, placeLocation, container) {
            this.queue.push({ photoUrl, placeName, placeLocation, container });
            this.processQueue();
        }

        async processQueue() {
            if (this.isProcessing || this.queue.length === 0) {
                return;
            }

            this.isProcessing = true;

            while (this.queue.length > 0 && this.activeLoads < this.maxConcurrent) {
                const item = this.queue.shift();
                this.loadImageFast(item);
                await this.delay(this.loadDelay);
            }

            this.isProcessing = false;
        }

        loadImageFast({ photoUrl, placeName, placeLocation, container }) {
            this.activeLoads++;

            const cleanup = () => {
                this.activeLoads--;
                this.processQueue();
            };

            if (photoUrl) {
                const img = new Image();
                let timeoutId;

                const onSuccess = () => {
                    clearTimeout(timeoutId);
                    img.style.width = "80px";
                    img.style.height = "80px";
                    img.style.borderRadius = "8px";
                    img.style.objectFit = "cover";
                    img.alt = placeName;

                    container.innerHTML = '';
                    container.appendChild(img);
                    cleanup();
                };

                const onError = () => {
                    clearTimeout(timeoutId);
                    console.log(`Using map view for ${placeName}`);
                    this.createMapView(placeName, placeLocation, container);
                    cleanup();
                };

                timeoutId = setTimeout(onError, 2000);

                img.onload = onSuccess;
                img.onerror = onError;
                img.src = photoUrl;
            } else {
                this.createMapView(placeName, placeLocation, container);
                cleanup();
            }
        }

        createMapView(placeName, placeLocation, container) {
            if (!placeLocation) {
                this.createFallbackImage(placeName, container);
                return;
            }

            // Handle both Google Maps LatLng objects and plain objects
            let lat, lng;

            if (typeof placeLocation.lat === 'function') {
                // Google Maps LatLng object
                lat = placeLocation.lat();
                lng = placeLocation.lng();
            } else if (placeLocation.lat !== undefined && placeLocation.lng !== undefined) {
                // Plain object with lat/lng properties
                lat = placeLocation.lat;
                lng = placeLocation.lng;
            } else {
                // Invalid location object
                this.createFallbackImage(placeName, container);
                return;
            }

            const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?` +
                `center=${lat},${lng}&` +
                `zoom=17&` +
                `size=80x80&` +
                `maptype=roadmap&` +
                `markers=color:red%7Clabel:•%7C${lat},${lng}&` +
                `style=feature:poi|visibility:on&` +
                `style=feature:transit|visibility:simplified&` +
                `key=${googleApiKey}`;

            const img = document.createElement("img");
            img.src = mapUrl;
            img.style.width = "80px";
            img.style.height = "80px";
            img.style.borderRadius = "8px";
            img.style.border = "2px solid #007bff";
            img.alt = `Map view of ${placeName}`;
            img.title = `Location: ${placeName}`;

            img.onload = () => {
                container.innerHTML = '';
                container.appendChild(img);
            };

            img.onerror = () => {
                this.createFallbackImage(placeName, container);
            };
        }

        createFallbackImage(placeName, container) {
            container.innerHTML = `
                <div style="
                    width: 80px;
                    height: 80px;
                    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                    border-radius: 8px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 20px;
                    border: 2px solid #0056b3;
                ">
                    🏨
                </div>
            `;
        }

        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    }

    const imageLoader = new FastImageLoader();

    function createImageContainer(placeName) {
        const container = document.createElement("div");
        container.className = "hotel-image-container";
        container.innerHTML = `<div class="loading-placeholder">⏳</div>`;
        return container;
    }

    function initMap() {
        geocoder = new google.maps.Geocoder();

        // Get city details to initialize maps
        const tempService = new google.maps.places.PlacesService(document.createElement('div'));
        tempService.getDetails({ placeId: CITY_PLACE_ID, fields: ['geometry'] }, (city, status) => {
            if (status !== google.maps.places.PlacesServiceStatus.OK) return;

            const center = city.geometry.location;

            // Initialize main map
            map = new google.maps.Map(document.getElementById('map'), { center, zoom: 13 });
            placesService = new google.maps.places.PlacesService(map);

            // Initialize address map
            addrMap = new google.maps.Map(document.getElementById('mapAddress'), { center, zoom: 13 });
            enableMapClickForAddress();

            // Load existing residence if available
            if (existingHotelName && existingHotelId) {
                loadExistingResidence();
            } else {
                // Load initial batch of hotels only if no existing residence
                loadHotelsFromServer();
            }
        });

        // Set up infinite scroll
        document.getElementById('hotelListPanel').addEventListener('scroll', () => {
            const panel = document.getElementById('hotelListPanel');
            if (!loading && panel.scrollTop + panel.clientHeight >= panel.scrollHeight - 50) {
                loadMoreHotels();
            }
        });
    }

    function loadHotelsFromServer() {
        console.log(`Loading hotels for ${CITY_NAME}`);

        // Use the server-side service to get hotel data (same as city view pattern)
        fetch(`/Home/GetHotelsInCity?cityPlaceId=${encodeURIComponent(CITY_PLACE_ID)}&cityName=${encodeURIComponent(CITY_NAME)}&maxResults=20`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(hotels => {
                // Clear loading indicator
                const panel = document.getElementById('hotelListPanel');
                panel.innerHTML = '';

                if (hotels.length === 0) {
                    panel.innerHTML = '<div class="no-results">No hotels found in this city.</div>';
                    return;
                }

                // Sort by rating and reviews (same as before)
                hotels.sort((a, b) => (b.userRatingsTotal || 0) - (a.userRatingsTotal || 0));

                // Store all hotels
                allHotels = hotels;

                // Render initial batch
                const initialBatch = hotels.slice(0, 10);
                initialBatch.forEach(hotel => {
                    const item = createHotelItem(hotel);
                    panel.appendChild(item);
                    renderedHotelIds.add(hotel.placeId);
                });

                console.log(`Loaded ${hotels.length} hotels from server, displaying first ${initialBatch.length}`);
            })
            .catch(error => {
                console.error('Error loading hotels:', error);
                const panel = document.getElementById('hotelListPanel');
                panel.innerHTML = '<div class="error-message">Error loading hotels. Please try again.</div>';
            });
    }

    function loadMoreHotels() {
        if (loading || renderedHotelIds.size >= allHotels.length) return;

        loading = true;
        const panel = document.getElementById('hotelListPanel');

        // Get next batch of hotels
        const nextBatch = allHotels.filter(hotel => !renderedHotelIds.has(hotel.placeId)).slice(0, 10);

        nextBatch.forEach(hotel => {
            const item = createHotelItem(hotel);
            panel.appendChild(item);
            renderedHotelIds.add(hotel.placeId);
        });

        loading = false;
        console.log(`Loaded ${nextBatch.length} more hotels`);
    }

    function loadExistingResidence() {
        console.log(`Loading existing residence: ${existingHotelName} with ID: ${existingHotelId}`);

        placesService.getDetails({
            placeId: existingHotelId,
            fields: ['name', 'place_id', 'geometry', 'formatted_address', 'rating', 'user_ratings_total', 'photos', 'price_level']
        }, (place, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && place) {
                console.log('Successfully loaded existing residence details:', place);

                // Set the selected hotel
                selectedHotel = place;

                // Center map on the existing residence
                map.setCenter(place.geometry.location);
                map.setZoom(16);

                // Enable the select button since we have a selection
                document.getElementById('selectHotelBtn').disabled = false;
                document.getElementById('selectHotelBtn').textContent = 'Update Hotel';

                // Clear the loading indicator from the hotel list panel
                const panel = document.getElementById('hotelListPanel');
                panel.innerHTML = '';

                // Load hotels normally
                loadHotelsFromServer();

                console.log(`Existing residence ${place.name} loaded successfully - map centered only`);
            } else {
                console.error('Failed to load existing residence details:', status);
                // Fallback: load hotels normally
                loadHotelsFromServer();
            }
        });
    }

    function createHotelItem(hotel) {
        const item = document.createElement('div');
        item.className = 'hotel-item';

        const rating = hotel.rating || 0;
        const reviews = hotel.userRatingsTotal || 0;

        const header = document.createElement('div');
        header.className = 'hotel-header';

        // Create image container
        const imageContainer = createImageContainer(hotel.name);

        // Create info div
        const infoDiv = document.createElement('div');
        infoDiv.className = 'info';

        infoDiv.innerHTML = `
            <strong>${hotel.name}</strong>
            <div class="hotel-rating">⭐ ${rating.toFixed(1)} (${reviews.toLocaleString()} reviews)</div>
        `;

        header.appendChild(imageContainer);
        header.appendChild(infoDiv);

        header.addEventListener('click', () => {
            // Handle location object properly
            const location = hotel.location;
            if (location) {
                let lat, lng;

                if (typeof location.lat === 'function') {
                    // Google Maps LatLng object
                    lat = location.lat();
                    lng = location.lng();
                } else if (location.lat !== undefined && location.lng !== undefined) {
                    // Plain object with lat/lng properties
                    lat = location.lat;
                    lng = location.lng;
                } else {
                    console.error('Invalid location object:', location);
                    return;
                }

                map.panTo(new google.maps.LatLng(lat, lng));
                map.setZoom(16);
            }

            toggleHotelDetails(header.nextSibling);
            selectedHotel = hotel;
            document.getElementById('selectHotelBtn').disabled = false;
        });

        item.appendChild(header);

        const details = document.createElement('div');
        details.className = 'hotel-details';
        details.innerHTML = '<em>Loading details…</em>';
        item.appendChild(details);

        // Load image using Places API (same pattern as city view)
        if (hotel.placeId) {
            placesService.getDetails({
                placeId: hotel.placeId,
                fields: ['photos']
            }, (place, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK && place && place.photos && place.photos.length > 0) {
                    // Get optimized photo URL
                    const photoUrl = place.photos[0].getUrl({
                        maxWidth: 80,
                        maxHeight: 80
                    });
                    imageLoader.addToQueue(
                        photoUrl,
                        hotel.name,
                        hotel.location,
                        imageContainer
                    );
                } else {
                    // No photos available, use map view
                    imageLoader.createMapView(hotel.name, hotel.location, imageContainer);
                }
            });
        } else {
            imageLoader.createFallbackImage(hotel.name, imageContainer);
        }

        // Load detailed information using server endpoint
        if (hotel.placeId) {
            fetch(`/Home/GetPlaceDetails?placeId=${encodeURIComponent(hotel.placeId)}`)
                .then(response => response.json())
                .then(full => {
                    if (!full) {
                        details.innerHTML = '<p><em>Details unavailable.</em></p>';
                        return;
                    }

                    const hours = full.openingHours?.weekdayText
                        ? `<h5>Hours</h5><ul>${full.openingHours.weekdayText.map(d => `<li>${d}</li>`).join('')}</ul>` : '';

                    const revs = (full.reviews || []).slice(0, 2)
                        .map(r => `<div class="review-item"><strong>${r.authorName}</strong> <span style="color: #ffc107;">⭐ ${r.rating}</span><p style="margin: 4px 0 0 0;">${r.text}</p></div>`).join('') || '<em>No reviews available.</em>';

                    details.innerHTML = `
                        <p><strong>📍 Address:</strong> ${full.formattedAddress}</p>
                        <p><strong>📞 Phone:</strong> ${full.formattedPhoneNumber || 'N/A'}</p>
                        <p><strong>🌐 Website:</strong> ${full.website ? `<a href="${full.website}" target="_blank" rel="noopener">${full.website}</a>` : 'N/A'}</p>
                        ${hours}
                        <h5>Recent Reviews</h5><div>${revs}</div>
                        <h5>About</h5><p>${full.editorialSummary || 'No description available.'}</p>
                    `;
                })
                .catch(err => {
                    console.error('Error loading hotel details:', err);
                    details.innerHTML = '<p><em>Details unavailable.</em></p>';
                });
        } else {
            details.innerHTML = '<p><em>Details unavailable.</em></p>';
        }

        return item;
    }

    function toggleHotelDetails(el) {
        document.querySelectorAll('#hotel .hotel-details')
            .forEach(d => { if (d !== el) d.style.display = 'none'; });
        el.style.display = el.style.display === 'block' ? 'none' : 'block';
    }

    document.getElementById('selectHotelBtn').addEventListener('click', () => {
        fetch('/Home/SaveResidence', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ scheduleId: scheduleId, hotelId: selectedHotel.place_id || selectedHotel.placeId, hotelName: selectedHotel.name })
        }).then(r => r.ok
            ? window.location.href = `/Home/LocationsAndActivities?scheduleId=${scheduleId}`
            : alert('Save failed')
        );
    });

    // ADDRESS TAB
    function enableMapClickForAddress() {
        addrMap.addListener('click', e => {
            geocoder.geocode({ location: e.latLng }, (res, st) => {
                if (st === 'OK' && res[0]) applyAddressFromClick(res[0], e.latLng);
            });
        });
    }

    function applyAddressFromClick(result, loc) {
        geocodedResult = result;
        if (addressMarker) addressMarker.setMap(null);
        addressMarker = new google.maps.Marker({ map: addrMap, position: loc });
        addrMap.panTo(loc);
        document.getElementById('addressInfo').innerHTML = `<p><strong>Address:</strong><br>${result.formatted_address}</p>`;
        document.getElementById('addressInfo').classList.remove('d-none');
        document.getElementById('saveAddressBtn').disabled = false;
    }

    document.getElementById('geocodeBtn').addEventListener('click', () => {
        clearAddressError();
        let a = document.getElementById('addressInput').value.trim();
        if (!a) { showAddressError('Please enter an address.'); return; }
        if (!a.toLowerCase().includes(CITY_NAME.toLowerCase())) a += ', ' + CITY_NAME;
        geocoder.geocode({ address: a }, (res, st) => {
            if (st !== 'OK' || !res.length) { showAddressError('Address not found.'); return; }
            const r = res[0];
            const hasStreet = r.address_components.some(c => c.types.includes('street_number') || c.types.includes('route'));
            if (!hasStreet) { showAddressError('Specify street number & name.'); return; }
            geocodedResult = r;
            if (addressMarker) addressMarker.setMap(null);
            addressMarker = new google.maps.Marker({ map: addrMap, position: r.geometry.location });
            addrMap.panTo(r.geometry.location);
            document.getElementById('addressInfo').innerHTML = `<p><strong>Address:</strong><br>${r.formatted_address}</p>`;
            document.getElementById('addressInfo').classList.remove('d-none');
            document.getElementById('saveAddressBtn').disabled = false;
        });
    });

    document.getElementById('saveAddressBtn').addEventListener('click', () => {
        const pid = geocodedResult.place_id, fn = geocodedResult.formatted_address;
        fetch('/Home/SaveResidence', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ scheduleId: scheduleId, hotelId: pid, hotelName: fn })
        }).then(r => r.ok
            ? window.location.href = `/Home/LocationsAndActivities?scheduleId=${scheduleId}`
            : showAddressError('Save failed.')
        );
    });

    function showAddressError(m) { const el = document.getElementById('addressError'); el.textContent = m; el.style.display = 'block'; }
    function clearAddressError() { document.getElementById('addressError').style.display = 'none'; }

    window.addEventListener('load', initMap);
</script>