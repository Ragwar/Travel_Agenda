@{
    ViewData["Title"] = "Home Page";
    var apiKey = ViewData["GoogleApiKey"];
    var currentUser = await UserManager.GetUserAsync(User);
    var Schedule = ViewBag.Schedule;
    var isExistingSchedule = ViewBag.IsExistingSchedule ?? false;
    var scheduleId = ViewBag.ScheduleId ?? 0;
}
<link rel="stylesheet" href="~/css/Index.css" />
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
    @await Html.PartialAsync("_ProgressFlowChart")
    <br>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <div class="input-container">
        <div class="form-group">
            @if (isExistingSchedule)
            {
                <h2>Update Your Travel Dates</h2>
                
                    bool hasValidDates = false;
                    try 
                    {
                        // Handle both nullable DateTime? and DateTime scenarios
                        if (Schedule?.Start_Date != null && Schedule?.End_Date != null)
                        {
                            var startDate = Schedule.Start_Date;
                            var endDate = Schedule.End_Date;
                            
                            // Check if it's a nullable DateTime with HasValue property
                            if (startDate.GetType() == typeof(DateTime?))
                            {
                                hasValidDates = ((DateTime?)startDate).HasValue && ((DateTime?)endDate).HasValue &&
                                               ((DateTime?)startDate).Value > DateTime.MinValue && ((DateTime?)endDate).Value > DateTime.MinValue;
                            }
                            else
                            {
                                // It's a regular DateTime, check if it's not the default value
                                hasValidDates = (DateTime)startDate > DateTime.MinValue && (DateTime)endDate > DateTime.MinValue;
                            }
                        }
                    }
                    catch 
                    {
                        hasValidDates = false;
                    }
                
                @if (hasValidDates)
                {

                        var startDate = Schedule.Start_Date;
                        var endDate = Schedule.End_Date;
                        
                        // Handle both nullable and non-nullable DateTime
                        DateTime displayStartDate, displayEndDate;
                        if (startDate.GetType() == typeof(DateTime?))
                        {
                            displayStartDate = ((DateTime?)startDate).Value;
                            displayEndDate = ((DateTime?)endDate).Value;
                        }
                        else
                        {
                            displayStartDate = (DateTime)startDate;
                            displayEndDate = (DateTime)endDate;
                        }

                    <p>Current dates: @displayStartDate.ToString("MMMM dd, yyyy") to @displayEndDate.ToString("MMMM dd, yyyy")</p>
                }
                else if (isExistingSchedule)
                {
                    <p>No dates currently set for this schedule.</p>
                }
            }
            else
            {
                <h2>Choose your travel period</h2>
            }
            <input type="text" id="dateRange" class="form-control" placeholder="Select your vacation dates" />
        </div>
        <div class="form-group">
            <button id="submitButton" class="btn btn-primary" type="button">
                @(isExistingSchedule ? "Update Dates" : "Continue")
            </button>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <h1 class="display-4">Welcome to Travel Agenda</h1>
        <p>Please login</p>
    </div>
}
<script>
    // Set the current progress step and schedule ID for the flowchart
    window.currentProgressStep = 'dates';
    window.progressScheduleId = @scheduleId > 0 ? @scheduleId : null;

    // Get the schedule ID from ViewBag (will be 0 for new schedules)
    const scheduleId = @scheduleId;
    const isExistingSchedule = @(isExistingSchedule.ToString().ToLower());

    console.log('=== INDEX VIEW DEBUG ===');
    console.log('scheduleId:', scheduleId);
    console.log('isExistingSchedule:', isExistingSchedule);
    console.log('window.progressScheduleId:', window.progressScheduleId);

    // Function to handle creating a new schedule and navigating to city
    function handleSkipForNewSchedule() {
        console.log('=== CALLING CreateNewSchedule ===');

        // Show loading state
        const skipBtn = document.getElementById('skipBtn');
        const originalText = skipBtn ? skipBtn.textContent : '';
        if (skipBtn) {
            skipBtn.textContent = 'Creating...';
            skipBtn.disabled = true;
        }

        fetch('/Home/CreateNewSchedule', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            }
        })
        .then(response => {
            console.log('CreateNewSchedule response status:', response.status);
            console.log('CreateNewSchedule response ok:', response.ok);

            if (!response.ok) {
                return response.text().then(text => {
                    console.error('CreateNewSchedule error response:', text);
                    throw new Error(`Server error: ${response.status} - ${text}`);
                });
            }
            return response.json();
        })
        .then(data => {
            console.log('CreateNewSchedule success data:', data);
            if (data && data.scheduleId) {
                console.log('Redirecting to City with scheduleId:', data.scheduleId);
                window.location.href = `/Home/City?scheduleId=${data.scheduleId}`;
            } else {
                console.error('No scheduleId in response:', data);
                alert("Failed to create schedule - no ID returned.");
                // Restore button state
                if (skipBtn) {
                    skipBtn.textContent = originalText;
                    skipBtn.disabled = false;
                }
            }
        })
        .catch(error => {
            console.error('CreateNewSchedule error:', error);
            alert('An error occurred while creating the schedule: ' + error.message);
            // Restore button state
            if (skipBtn) {
                skipBtn.textContent = originalText;
                skipBtn.disabled = false;
            }
        });
    }

    // Function to handle skip for existing schedule
    function handleSkipForExistingSchedule() {
        console.log('=== NAVIGATING TO EXISTING SCHEDULE ===');
        console.log('Using scheduleId:', scheduleId);
        window.location.href = `/Home/City?scheduleId=${scheduleId}`;
    }

    // Override the global skip function - do this immediately, not in setTimeout
    window.goToNextStep = function() {
        console.log('=== SKIP BUTTON CLICKED ===');
        console.log('isExistingSchedule:', isExistingSchedule);
        console.log('scheduleId:', scheduleId);

        if (!isExistingSchedule || scheduleId === 0) {
            console.log('Creating new schedule path');
            handleSkipForNewSchedule();
        } else {
            console.log('Existing schedule path');
            handleSkipForExistingSchedule();
        }
    };

    // Also override the function that might be called directly from the HTML
    window.handleSkipClick = window.goToNextStep;

    console.log('=== goToNextStep function set ===');

    // Wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log('=== DOM READY ===');

        // Double-check that our function is still set
        setTimeout(() => {
            if (typeof window.goToNextStep !== 'function' || window.goToNextStep.toString().indexOf('SKIP BUTTON CLICKED') === -1) {
                console.warn('goToNextStep function was overridden, setting it again');
                window.goToNextStep = function() {
                    console.log('=== SKIP BUTTON CLICKED (RESTORED) ===');
                    console.log('isExistingSchedule:', isExistingSchedule);
                    console.log('scheduleId:', scheduleId);

                    if (!isExistingSchedule || scheduleId === 0) {
                        console.log('Creating new schedule path');
                        handleSkipForNewSchedule();
                    } else {
                        console.log('Existing schedule path');
                        handleSkipForExistingSchedule();
                    }
                };
            }
        }, 500);
    });

    // Initialize Flatpickr with range mode and allow single date
    const flatpickrConfig = {
        mode: "range",
        dateFormat: "Y-m-d",
        minDate: "today",
        allowInput: false,
        @{
                bool hasValidDatesForJS = false;
                string startDateStr = "";
                string endDateStr = "";

                try
                {
                        if (isExistingSchedule && Schedule?.Start_Date != null && Schedule?.End_Date != null)
                        {
                                var startDate = Schedule.Start_Date;
                                var endDate = Schedule.End_Date;

                                // Handle both nullable DateTime? and DateTime scenarios
                                if (startDate.GetType() == typeof(DateTime?))
                                {
                                        if (((DateTime?)startDate).HasValue && ((DateTime?)endDate).HasValue &&
                                                ((DateTime?)startDate).Value > DateTime.MinValue && ((DateTime?)endDate).Value > DateTime.MinValue)
                                        {
                                                hasValidDatesForJS = true;
                                                startDateStr = ((DateTime?)startDate).Value.ToString("yyyy-MM-dd");
                                                endDateStr = ((DateTime?)endDate).Value.ToString("yyyy-MM-dd");
                                        }
                                }
                                else
                                {
                                        if ((DateTime)startDate > DateTime.MinValue && (DateTime)endDate > DateTime.MinValue)
                                        {
                                                hasValidDatesForJS = true;
                                                startDateStr = ((DateTime)startDate).ToString("yyyy-MM-dd");
                                                endDateStr = ((DateTime)endDate).ToString("yyyy-MM-dd");
                                        }
                                }
                        }
                }
                catch
                {
                        hasValidDatesForJS = false;
                }
        }
        @if (hasValidDatesForJS)
        {
                    <text>defaultDate: ["@startDateStr", "@endDateStr"],</text>
        }
        onClose: function (selectedDates, dateStr, instance) {
            // if only one date selected, flatpickr will show just that date without the "to" text
            // no further action needed here
        }
    };

    console.log('Flatpickr config:', flatpickrConfig);
    flatpickr("#dateRange", flatpickrConfig);

    // Handle the Continue/Update button click
    document.getElementById("submitButton").addEventListener("click", () => {
        const raw = document.getElementById("dateRange").value;
        if (!raw) {
            alert("Please select at least a start date.");
            return;
        }

        const parts = raw.split(" to ");
        const startDate = parts[0];
        const endDate = parts.length > 1 ? parts[1] : parts[0];

        const payload = {
            StartDate: startDate,
            EndDate: endDate,
            ScheduleId: isExistingSchedule ? scheduleId : 0
        };

        console.log('Sending payload:', payload);

        fetch('/Home/SaveDates', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(errorData.error || 'Server error');
                }).catch(() => {
                    throw new Error(`Server error: ${response.status}`);
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.scheduleId) {
                window.location.href = `/Home/City?scheduleId=${data.scheduleId}`;
            } else {
                alert("Failed to save dates.");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(error.message || 'An error occurred while saving dates.');
        });
    });
</script>