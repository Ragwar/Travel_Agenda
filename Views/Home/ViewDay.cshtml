@{
    ViewData["Title"] = "View Day";
    var schedule = ViewBag.Schedule as TravelAgenda.Models.Schedule;
    var dayActivities = (ViewBag.DayActivities as IEnumerable<TravelAgenda.Models.ScheduleActivity>)?.ToList()
                       ?? new List<TravelAgenda.Models.ScheduleActivity>();
    var selectedDate = ViewBag.SelectedDate as DateTime?;
    var apiKey = ViewData["GoogleApiKey"];
}

<link rel="stylesheet" href="~/css/ViewDay.css" />

<h1>
    @schedule.CityName - @selectedDate?.ToString("dddd, MMMM dd, yyyy")
</h1>

<!-- Main container: Left for activities, right for calendar -->
<div class="day-view-container">
    <!-- Activities List -->
    <div class="activities-panel">
        <h3>Activities for this day (@dayActivities.Count activities)</h3>

        <div class="activities-content">
            @if (dayActivities.Count == 0)
            {
                <div class="no-activities">
                    <div class="no-activities-icon">📅</div>
                    <p>No activities scheduled for this day</p>
                    <a class="btn btn-primary"
                       asp-controller="Home"
                       asp-action="LocationsAndActivities"
                       asp-route-scheduleId="@schedule.ScheduleId">
                        Add Activities
                    </a>
                </div>
            }
            else
            {
                @foreach (var activity in dayActivities)
                {
                    <div class="activity-item">
                        <div class="activity-header" onclick="toggleActivityDetails(this)">
                            <div class="activity-image-container">
                                <div class="activity-image-placeholder">📍</div>
                            </div>
                            <div class="activity-info">
                                <strong>@activity.Name</strong>
                                <div class="activity-time">
                                    ⏰ @activity.StartHour:@((activity.StartMinute ?? 0).ToString("00")) - @activity.EndHour:@((activity.EndMinute ?? 0).ToString("00"))
                                </div>
                                <div class="activity-type">
                                    @if (!string.IsNullOrEmpty(activity.Type))
                                    {
                                        @switch (activity.Type.ToLower())
                                        {
                                            case "restaurant":
                                                <span class="type-badge restaurant">🍽️ Restaurant</span>
                                                break;
                                            case "hotel":
                                                <span class="type-badge hotel">🏨 Hotel</span>
                                                break;
                                            case "park":
                                                <span class="type-badge park">🌳 Park</span>
                                                break;
                                            case "museum":
                                                <span class="type-badge museum">🏛️ Museum</span>
                                                break;
                                            case "shopping_mall":
                                                <span class="type-badge shopping">🛍️ Shopping</span>
                                                break;
                                            default:
                                                <span class="type-badge default">📍 @activity.Type</span>
                                                break;
                                        }
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="activity-details">
                            <div class="loading-details">
                                <div class="loading-icon">⏳</div>
                                <em>Loading detailed information...</em>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <!-- Calendar Container -->
    <div class="calendar-panel">
        <div class="day-calendar">
            <div class="calendar-header">
                <h4>@selectedDate?.ToString("dddd, MMM dd")</h4>
            </div>
            <div class="hourSlotsScroll">
                <div class="hourSlotsContainer">
                    @for (int h = 1; h <= 24; h++)
                    {
                        <div class="hour-slot" style="top:@((h - 1) * 60)px;">
                            <div class="hour-label">
                                @(h % 12 == 0 ? 12 : h % 12)@(h < 12 ? "AM" : "PM")
                            </div>
                        </div>
                    }

                    @* render this day's events *@
                    @foreach (var activity in dayActivities)
                    {
                        var startTime = activity.StartHour + ((activity.StartMinute ?? 0) / 60.0);
                        var endTime = activity.EndHour + ((activity.EndMinute ?? 0) / 60.0);

                        var top = (startTime - 1) * 60;
                        var height = (endTime - startTime) * 60 - 2;

                        <div class="event" style="top: @(top)px; height: @(height)px;">
                            <div class="content">@activity.Name</div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <!-- Top row: Google Maps and Edit Activities side by side -->
            <div class="action-buttons-row">
                @{
                    var hotelName = schedule.HotelName ?? string.Empty;
                    var encodedHotel = Uri.EscapeDataString(hotelName);
                    var stops = dayActivities
                    .Where(a => a.Name != hotelName)
                    .Select(a => Uri.EscapeDataString(a.Name));
                    var waypointsParam = string.Join("|", stops);
                    var routeUrl = $"https://www.google.com/maps/dir/?api=1&origin={encodedHotel}&destination={encodedHotel}&travelmode=driving";
                    if (!string.IsNullOrEmpty(waypointsParam))
                    {
                        routeUrl += $"&waypoints={waypointsParam}";
                    }
                }

                <a href="@routeUrl" target="_blank" class="route-btn">
                    Show Route in Google Maps
                </a>

                <a class="edit-activities-btn"
                   asp-controller="Home"
                   asp-action="LocationsAndActivities"
                   asp-route-scheduleId="@schedule.ScheduleId">
                    Edit Activities
                </a>
            </div>

            <!-- Bottom row: Back to Full Schedule -->
            <a class="back-to-schedule-btn"
               asp-controller="Home"
               asp-action="ViewSchedule"
               asp-route-id="@schedule.ScheduleId">
                Back to Full Schedule
            </a>
        </div>
    </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places"></script>
<script>
    const googleApiKey = "@apiKey";
    const loadedActivities = new Set();
    let placesService;
    let map; // Add map reference

    // Fast image loader (enhanced with better error handling)
    class FastImageLoader {
        constructor() {
            this.queue = [];
            this.isProcessing = false;
            this.maxConcurrent = 3;
            this.activeLoads = 0;
            this.loadDelay = 300;
        }

        addToQueue(photoUrl, placeName, placeLocation, container) {
            this.queue.push({ photoUrl, placeName, placeLocation, container });
            this.processQueue();
        }

        async processQueue() {
            if (this.isProcessing || this.queue.length === 0) {
                return;
            }

            this.isProcessing = true;

            while (this.queue.length > 0 && this.activeLoads < this.maxConcurrent) {
                const item = this.queue.shift();
                this.loadImageFast(item);
                await this.delay(this.loadDelay);
            }

            this.isProcessing = false;
        }

        loadImageFast({ photoUrl, placeName, placeLocation, container }) {
            this.activeLoads++;

            const cleanup = () => {
                this.activeLoads--;
                this.processQueue();
            };

            if (photoUrl) {
                const img = new Image();
                let timeoutId;

                const onSuccess = () => {
                    clearTimeout(timeoutId);
                    img.style.width = "80px";
                    img.style.height = "80px";
                    img.style.borderRadius = "8px";
                    img.style.objectFit = "cover";
                    img.alt = placeName;

                    container.innerHTML = '';
                    container.appendChild(img);
                    cleanup();
                };

                const onError = () => {
                    clearTimeout(timeoutId);
                    console.log(`Photo failed for ${placeName}, trying map view`);
                    this.createMapView(placeName, placeLocation, container);
                    cleanup();
                };

                timeoutId = setTimeout(onError, 3000); // Increased timeout

                img.onload = onSuccess;
                img.onerror = onError;
                img.src = photoUrl;
            } else {
                console.log(`No photo URL for ${placeName}, using map view`);
                this.createMapView(placeName, placeLocation, container);
                cleanup();
            }
        }

        createMapView(placeName, placeLocation, container) {
            if (!placeLocation) {
                console.log(`No location for ${placeName}, using fallback`);
                this.createFallbackImage(placeName, container);
                return;
            }

            // Handle both Google Maps objects and plain objects from service
            const lat = typeof placeLocation.lat === 'function' ? placeLocation.lat() : placeLocation.lat;
            const lng = typeof placeLocation.lng === 'function' ? placeLocation.lng() : placeLocation.lng;

            if (!lat || !lng) {
                console.log(`Invalid coordinates for ${placeName}, using fallback`);
                this.createFallbackImage(placeName, container);
                return;
            }

            const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?` +
                `center=${lat},${lng}&` +
                `zoom=17&` +
                `size=80x80&` +
                `maptype=roadmap&` +
                `markers=color:red%7Clabel:•%7C${lat},${lng}&` +
                `style=feature:poi|visibility:on&` +
                `style=feature:transit|visibility:simplified&` +
                `key=${googleApiKey}`;

            const img = document.createElement("img");
            img.src = mapUrl;
            img.style.width = "80px";
            img.style.height = "80px";
            img.style.borderRadius = "8px";
            img.style.border = "2px solid #007bff";
            img.alt = `Map view of ${placeName}`;

            img.onload = () => {
                container.innerHTML = '';
                container.appendChild(img);
            };

            img.onerror = () => {
                console.log(`Map view failed for ${placeName}, using fallback`);
                this.createFallbackImage(placeName, container);
            };
        }

        createFallbackImage(placeName, container) {
            const typeIcons = {
                restaurant: '🍽️',
                hotel: '🏨',
                park: '🌳',
                museum: '🏛️',
                shopping_mall: '🛍️',
                default: '📍'
            };

            const icon = typeIcons.default;
            container.innerHTML = `
                <div style="
                    width: 80px;
                    height: 80px;
                    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                    border-radius: 8px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 20px;
                    border: 2px solid #0056b3;
                ">
                    ${icon}
                </div>
            `;
        }

        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    }

    const imageLoader = new FastImageLoader();

    // Helper function to get optimized photo URL
    function getOptimizedPhotoUrl(photo) {
        if (!photo) return null;

        try {
            return photo.getUrl({
                maxWidth: 80,
                maxHeight: 80
            });
        } catch (error) {
            console.error('Error getting photo URL:', error);
            return null;
        }
    }

    // Initialize Places Service with proper map
    function initPlacesService() {
        console.log('Initializing Places Service...');

        // Create a hidden map just for the Places Service
        const hiddenMapDiv = document.createElement('div');
        hiddenMapDiv.style.display = 'none';
        hiddenMapDiv.id = 'hidden-map';
        document.body.appendChild(hiddenMapDiv);

        map = new google.maps.Map(hiddenMapDiv, {
            zoom: 10,
            center: { lat: 44.3192, lng: 23.7949 } // Craiova coordinates
        });

        placesService = new google.maps.places.PlacesService(map);
        console.log('Places Service initialized');
    }

    // Toggle activity details
    function toggleActivityDetails(header) {
        const details = header.nextElementSibling;

        if (!details || !details.classList.contains('activity-details')) {
            console.error('Could not find activity-details element');
            return;
        }

        // Hide all other details
        document.querySelectorAll(".activity-details").forEach(d => {
            if (d !== details) {
                d.style.display = "none";
            }
        });

        if (details.style.display === "none" || details.style.display === "") {
            details.style.display = "block";
        } else {
            details.style.display = "none";
        }
    }

    // Enhanced load activity details function
    function loadActivityDetails(activityName, placeId, detailsContainer, headerElement) {
        console.log(`Loading details for: ${activityName}, placeId: ${placeId}`);

        if (!placeId || placeId.trim() === '') {
            console.log(`No placeId for ${activityName}, showing no details message`);
            detailsContainer.innerHTML = `
                <div style="text-align: center; color: #999; padding: 20px;">
                    <div style="font-size: 20px; margin-bottom: 10px;">ℹ️</div>
                    <p><em>No additional details available for this activity.</em></p>
                </div>
            `;
            return;
        }

        // Show loading state
        detailsContainer.innerHTML = `
            <div style="text-align: center; color: #666; padding: 20px;">
                <div style="font-size: 20px; margin-bottom: 10px;">⏳</div>
                <p><em>Loading detailed information...</em></p>
            </div>
        `;

        // Use the service endpoint with better error handling
        fetch(`/Home/GetPlaceDetails?placeId=${encodeURIComponent(placeId)}`)
            .then(response => {
                console.log(`Response status for ${activityName}: ${response.status}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(place => {
                console.log(`Places API response for ${activityName}:`, place);
                if (place && place.name) {
                    renderPlaceDetails(place, detailsContainer, headerElement, activityName);
                } else {
                    console.log(`No valid place data returned for ${activityName}`);
                    fallbackToSearch(activityName, detailsContainer);
                }
            })
            .catch(error => {
                console.error(`Failed to load details for ${activityName}:`, error);
                fallbackToSearch(activityName, detailsContainer);
            });
    }

    // Fallback search function
    function fallbackToSearch(activityName, detailsContainer) {
        console.log(`Attempting fallback search for: ${activityName}`);

        const searchEndpoint = `/Home/SearchPlaces?query=${encodeURIComponent(activityName)}`;

        fetch(searchEndpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Search failed with status: ${response.status}`);
                }
                return response.json();
            })
            .then(searchResults => {
                console.log(`Search results for ${activityName}:`, searchResults);

                if (searchResults && searchResults.length > 0) {
                    const foundPlace = searchResults[0];
                    console.log(`Found place via search:`, foundPlace);

                    // Convert PlaceResult to PlaceDetailsResult format
                    const placeDetails = {
                        placeId: foundPlace.placeId,
                        name: foundPlace.name,
                        formattedAddress: foundPlace.formattedAddress,
                        rating: foundPlace.rating,
                        userRatingsTotal: foundPlace.userRatingsTotal,
                        priceLevel: foundPlace.priceLevel,
                        types: foundPlace.types,
                        photos: foundPlace.photos,
                        location: foundPlace.location,
                        // Add empty defaults for missing fields
                        formattedPhoneNumber: null,
                        website: null,
                        openingHours: null,
                        reviews: []
                    };

                    renderPlaceDetails(placeDetails, detailsContainer, null, activityName);
                } else {
                    console.log(`No search results found for ${activityName}`);
                    showNoDetailsMessage(detailsContainer);
                }
            })
            .catch(searchError => {
                console.error('Search fallback also failed:', searchError);
                showNoDetailsMessage(detailsContainer);
            });
    }

    // Show no details message
    function showNoDetailsMessage(detailsContainer) {
        detailsContainer.innerHTML = `
            <div style="text-align: center; color: #999; padding: 20px;">
                <div style="font-size: 20px; margin-bottom: 10px;">❌</div>
                <p><em>Unable to load detailed information for this location.</em></p>
            </div>
        `;
    }

    // Enhanced function to load both images and details
    function loadActivityImagesAndDetails(activityName, placeId, detailsContainer, headerElement) {
        console.log(`Loading images and details for: ${activityName}, placeId: ${placeId}`);

        const imageContainer = headerElement.querySelector('.activity-image-container');

        // Handle image loading
        if (imageContainer) {
            if (!placeId || placeId.trim() === '') {
                console.log(`No placeId for ${activityName}, using fallback image`);
                imageLoader.createFallbackImage(activityName, imageContainer);
            } else if (placesService) {
                // Try to get photos using Places Service
                placesService.getDetails({
                    placeId: placeId,
                    fields: ['photos', 'geometry', 'name']
                }, (place, status) => {
                    console.log(`Places Service response for ${activityName}:`, status, place);

                    if (status === google.maps.places.PlacesServiceStatus.OK && place) {
                        if (place.photos && place.photos.length > 0) {
                            const photoUrl = getOptimizedPhotoUrl(place.photos[0]);
                            const location = place.geometry ? place.geometry.location : null;
                            imageLoader.addToQueue(
                                photoUrl,
                                activityName,
                                location,
                                imageContainer
                            );
                        } else {
                            // No photos available, use map view
                            const location = place.geometry ? place.geometry.location : null;
                            imageLoader.createMapView(activityName, location, imageContainer);
                        }
                    } else {
                        console.error(`Failed to get place details for images (${activityName}):`, status);
                        imageLoader.createFallbackImage(activityName, imageContainer);
                    }
                });
            } else {
                console.log(`Places service not ready for ${activityName}, using fallback`);
                imageLoader.createFallbackImage(activityName, imageContainer);
            }
        }

        // Load detailed information
        loadActivityDetails(activityName, placeId, detailsContainer, headerElement);
    }

    // Enhanced function to render place details
    function renderPlaceDetails(place, detailsContainer, headerElement, activityName) {
        console.log(`Rendering details for:`, place);

        if (!place || !place.name) {
            showNoDetailsMessage(detailsContainer);
            return;
        }

        // Generate detailed content with null checks
        const rating = place.rating ? `⭐ ${place.rating} (${place.userRatingsTotal || 0} reviews)` : 'No rating available';

        // Enhanced opening hours with better formatting
        const hours = place.openingHours?.weekdayText && place.openingHours.weekdayText.length > 0
            ? `
                <div class="info-section">
                    <h5>🕒 Opening Hours</h5>
                    <div class="hours-list">
                        ${place.openingHours.weekdayText.map(d => `<div class="hour-item">${d}</div>`).join("")}
                    </div>
                </div>
            ` : `
                <div class="info-section">
                    <h5>🕒 Opening Hours</h5>
                    <div class="hours-list">
                        <div class="hour-item" style="color: #666; font-style: italic;">Opening hours not available</div>
                    </div>
                </div>
            `;

        // Enhanced reviews section
        const reviews = (place.reviews && place.reviews.length > 0)
            ? place.reviews.slice(0, 2).map(r => `
                <div class="review-item">
                    <div class="review-header">
                        <strong>${r.authorName || 'Anonymous'}</strong>
                        <span class="review-rating">⭐ ${r.rating || 'N/A'}</span>
                    </div>
                    <p class="review-text">${(r.text || '').substring(0, 150)}${r.text && r.text.length > 150 ? '...' : ''}</p>
                </div>
            `).join("")
            : `<div class="no-reviews">No reviews available</div>`;

        detailsContainer.innerHTML = `
            <div class="details-content">
                <div class="details-grid">
                    <div class="details-left">
                        <div class="info-section">
                            <h5>📍 Contact Information</h5>
                            <div class="contact-info">
                                <p><strong>Address:</strong><br><span class="address">${place.formattedAddress || 'Address not available'}</span></p>
                                <p><strong>Phone:</strong><br><span class="phone">${place.formattedPhoneNumber || 'N/A'}</span></p>
                                <p><strong>Website:</strong><br>
                                    ${place.website
                                        ? `<a href="${place.website}" target="_blank" class="website-link">${place.website}</a>`
                                        : '<span class="na">N/A</span>'
                                    }
                                </p>
                                <p><strong>Rating:</strong><br><span class="rating">${rating}</span></p>
                            </div>
                        </div>
                        ${hours}
                    </div>
                    <div class="details-right">
                        <div class="info-section">
                            <h5>⭐ Reviews</h5>
                            <div class="reviews-section">
                                <h6>Recent Reviews</h6>
                                <div class="reviews-list">${reviews}</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="external-link">
                    <a href="https://www.google.com/maps/place/?q=place_id:${place.placeId || ''}"
                       target="_blank"
                       class="maps-link">
                        🗺️ View on Google Maps
                    </a>
                </div>
            </div>
        `;
    }

    // Initialize everything when page loads
    window.addEventListener('load', function () {
        console.log('Page loaded, initializing...');

        // Scroll calendar to 8 AM
        const scrollTo = (8 - 1) * 60; // 7 hours × 60px
        const calendarScroll = document.querySelector('.hourSlotsScroll');
        if (calendarScroll) {
            calendarScroll.scrollTop = scrollTo;
        }

        // Initialize Places Service first
        initPlacesService();

        // Wait for Google Maps to be ready, then start loading activities
        const waitForGoogleMaps = setInterval(() => {
            if (typeof google !== 'undefined' && google.maps && google.maps.places) {
                clearInterval(waitForGoogleMaps);
                console.log('Google Maps API ready, starting activity loading...');

                // Get all activity items in order
                const activityItems = document.querySelectorAll('.activity-item');
                let activityIndex = 0;

                console.log(`Found ${activityItems.length} activity items`);

                // Process activities from server data
                @foreach (var activity in dayActivities)
                {
                        <text>
                        console.log(`Processing activity: @Html.Raw(Html.Encode(activity.Name))`);

                        const activityItem@(activity.ScheduleActivityId) = activityItems[activityIndex];
                        if (activityItem@(activity.ScheduleActivityId)) {
                            const header@(activity.ScheduleActivityId) = activityItem@(activity.ScheduleActivityId).querySelector('.activity-header');
                            const details@(activity.ScheduleActivityId) = activityItem@(activity.ScheduleActivityId).querySelector('.activity-details');

                            if (header@(activity.ScheduleActivityId)) {
                                @if (!string.IsNullOrEmpty(activity.PlaceId))
                                {
                                        <text>
                                        header@(activity.ScheduleActivityId).dataset.placeId = '@activity.PlaceId';
                                        header@(activity.ScheduleActivityId).dataset.activityId = '@activity.ScheduleActivityId';

                                        if (details@(activity.ScheduleActivityId)) {
                                            details@(activity.ScheduleActivityId).style.display = 'none';

                                            // Stagger the API calls to avoid rate limiting
                                            setTimeout(() => {
                                                console.log(`Loading details for activity @(activity.ScheduleActivityId): @Html.Raw(Html.Encode(activity.Name))`);
                                                loadActivityImagesAndDetails('@Html.Raw(Html.Encode(activity.Name))', '@activity.PlaceId', details@(activity.ScheduleActivityId), header@(activity.ScheduleActivityId));
                                            }, activityIndex * 1000); // Increased delay to 1 second
                                        }
                                        </text>
                                }
                                else
                                {
                                        <text>
                                        header@(activity.ScheduleActivityId).dataset.activityId = '@activity.ScheduleActivityId';

                                        const imageContainer@(activity.ScheduleActivityId) = activityItem@(activity.ScheduleActivityId).querySelector('.activity-image-container');

                                        // Load fallback image for activities without place_id
                                        if (imageContainer@(activity.ScheduleActivityId)) {
                                            console.log(`No placeId for @Html.Raw(Html.Encode(activity.Name)), using fallback image`);
                                            imageLoader.createFallbackImage('@Html.Raw(Html.Encode(activity.Name))', imageContainer@(activity.ScheduleActivityId));
                                        }

                                        if (details@(activity.ScheduleActivityId)) {
                                            details@(activity.ScheduleActivityId).style.display = 'none';
                                            details@(activity.ScheduleActivityId).innerHTML = `
                                                <div style="text-align: center; color: #999; padding: 20px;">
                                                    <div style="font-size: 20px; margin-bottom: 10px;">ℹ️</div>
                                                    <p><em>No additional details available for this activity.</em></p>
                                                </div>
                                            `;
                                        }
                                        </text>
                                }
                            }
                        }
                        activityIndex++;
                        </text>
                }
            }
        }, 100); // Check every 100ms until Google Maps is ready
    });
</script>