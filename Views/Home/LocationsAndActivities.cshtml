
<link rel="stylesheet" href="~/css/LocationsAndActivities.css" asp-append-version="true" />

@{
    // Razor Variables
    ViewData["Title"] = "Activities & Locations";
    var schedule = ViewBag.Schedule; // Contains StartDate and EndDate
    var cityName = ViewBag.CityName;
    var placeId = ViewBag.PlaceId;
    var apiKey = ViewBag.GoogleApiKey;
}

@await Html.PartialAsync("_ProgressFlowChart")

<!-- Main container: Left for locations/tabs, right for calendar -->
<div style="display: flex; justify-content: space-between; margin-top: 20px;">
    <!-- Locations & Tabs -->
    <div style="width: 60%; padding-right: 20px;">
        <!-- Tab Navigation -->
        <ul class="nav-tabs" id="locationTabs"></ul>
        <!-- Tab Content -->
        <div class="tab-content" id="locationTabContent"></div>
    </div>

    <!-- Calendar Container -->
    <div style="width: 35%;">
        <div id="calendar">
            <div id="calendarHeaderContainer" style="display:flex; align-items:center; justify-content:center;">
                <button id="prevDayBtn" style="margin-right:10px;">&#9664;</button>
                <div id="calendarHeader"></div>
                <button id="nextDayBtn" style="margin-left:10px;">&#9654;</button>
            </div>
            <div id="hourSlotsScroll">
                <div id="hourSlotsContainer"></div>
            </div>
        </div>

        <button id="routeBtn" style="margin-top: 20px;">
            View route in Google Maps
        </button>
    </div>
</div>

<!-- Load Google Maps Places library -->
<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places,geometry" async defer></script>

<script>
    window.currentProgressStep = 'activities';
    const googleApiKey = "@apiKey";    // from your Razor ViewData

    // Serialize saved activities from the ViewBag.
    // Note: property names here should match your model: Start_Date, Start_Hour, Start_Minute, End_Hour, End_Minute, Name, Place_Id, Type, etc.
    const scheduleId = @ViewBag.Schedule.ScheduleId;
    savedActivities = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Locations ?? new List<object>()));

    // ======================================================
    // CALENDAR CONFIGURATION & EVENT RENDERING (Custom Code)
    // ======================================================
    const slotHeight = 60; // each hour slot is 60px tall
    const fullStartHour = 1;
    const fullEndHour = 25; // hours 1 to 24 (endHour is non-inclusive)
    const visibleSlots = 8;
    const defaultScrollStart = 8; // 8AM is default top visible hour
    let contentLoadedFlags = {};
    const calendarHeaderEl = document.getElementById("calendarHeader");
    const scheduleDate = "@(ViewBag.Schedule?.StartDate?.ToString("yyyy-MM-dd") ?? DateTime.Today.ToString("yyyy-MM-dd"))";
    calendarHeaderEl.textContent = "Schedule for " + scheduleDate;
    const calendarEl = document.getElementById("hourSlotsContainer");
    const hourSlotsContainer = document.getElementById("hourSlotsContainer");
    hourSlotsContainer.style.height = ((fullEndHour - fullStartHour) * slotHeight) + "px";

    const hourSlotsScroll = document.getElementById("hourSlotsScroll");
    hourSlotsScroll.style.height = (visibleSlots * slotHeight) + "px";

    let selectedSlot = null;
    // Set current date from the schedule start date.
    let currentDate = new Date(scheduleDate);
    // End date from your schedule (should be set in ViewBag.Schedule)
    const scheduleEndDate = new Date("@(ViewBag.Schedule?.EndDate?.ToString("yyyy-MM-dd"))");

    // Add this right after defining the schedule dates
    const isDefaultDate = scheduleDate.includes("0001-01-01") ||
                         "@(ViewBag.Schedule?.EndDate?.ToString("yyyy-MM-dd"))".includes("0001-01-01");

    // Add near the top of the script where other global variables are defined
    let hasValidScheduleDates = false;

    function updateProgressButtonsVisibility() {
    if (currentProgressStep === 'activities' && !hasValidScheduleDates) {
        const skipBtn = document.getElementById("skipBtn");
        if (skipBtn) {
            // Disable the button instead of hiding it
            skipBtn.disabled = true;

            // Add visual styling for disabled state
            skipBtn.style.opacity = "0.5";
            skipBtn.style.cursor = "not-allowed";
            skipBtn.style.background = "#6c757d";
            skipBtn.style.color = "#ffffff";
            skipBtn.style.border = "1px solid #6c757d";

            // Optional: Add a title attribute to explain why it's disabled
            skipBtn.title = "Please select your travel period first";

            // Prevent any click events while disabled
            skipBtn.onclick = function(e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            };
        }
    }
    }
    // Function to check if we have valid schedule dates
        function checkScheduleDates() {
        if (isDefaultDate) {
            // Create overlay for calendar only
            const calendarOverlay = document.createElement("div");
            calendarOverlay.className = "calendar-overlay";
            calendarOverlay.innerHTML = `
                <div class="calendar-overlay-message">
                    <div class="overlay-icon">⏱️</div>
                    <p>Please select city break period to have access to the agenda</p>
                    <a href="/Home/TimePeriod?scheduleId=${scheduleId}" class="btn btn-primary">Select Period</a>
                </div>
            `;

            // Append overlay to calendar container only
            const calendarContainer = document.getElementById("calendar");
            calendarContainer.style.position = "relative"; // Ensure proper positioning of the overlay
            calendarContainer.appendChild(calendarOverlay);

            // Disable route button
            document.getElementById("routeBtn").disabled = true;
            document.getElementById("routeBtn").classList.add("disabled");

            hasValidScheduleDates = false;

            // Update progress buttons visibility
            setTimeout(updateProgressButtonsVisibility, 100);

            return true;
        }
        hasValidScheduleDates = true;
        return false;
    }

    // Render full day slots (from 1AM to 24PM)
    const step = 0.5;  // half-hour
    for (let t = fullStartHour; t < fullEndHour; t += step) {
        const slot = document.createElement("div");
        // use a shared class so your existing CSS applies
        slot.className = "hour-slot";
        slot.dataset.hour = t;
        // Each half-hour is half the height
        slot.style.top = ((t - fullStartHour) * slotHeight) + "px";
        slot.style.height = (slotHeight * step) + "px";

        // Only integer hours get a visible label
        if (Number.isInteger(t)) {
            const label = document.createElement("div");
            label.className = "hour-label";
            let h = t;
            let displayHour = (h % 12 === 0 ? 12 : h % 12);
            label.textContent = displayHour + (h < 12 ? "AM" : "PM");
            slot.appendChild(label);
        } else {
            // half-hour: make borders invisible (you can refine in your CSS)
            slot.style.borderTop = "none";
        }

        slot.addEventListener("click", function () {
            document.querySelectorAll(".hour-slot").forEach(s => s.classList.remove("selected"));
            slot.classList.add("selected");
            selectedSlot = slot;
        });
        // ─── dragover ───────────────────────────────────────────────────────────

        slot.addEventListener("dragover", function (e) {
            e.preventDefault();
            slot.classList.add("drag-over");
        });
        slot.addEventListener("dragleave", function () {
            slot.classList.remove("drag-over");
        });
        slot.addEventListener("drop", function (e) {
            e.preventDefault();
            slot.classList.remove("drag-over");
            if (window.draggedEvent) {
                let ev = window.draggedEventObj;
                let raw = parseFloat(slot.dataset.hour);
                let newStart = Math.round(raw * 2) / 2;

                if (isRangeFree(newStart, ev.duration, ev)) {
                    ev.start = newStart;
                    updateScheduleActivity(ev);
                } else {
                    ev.start = ev._oldStart;
                }

                renderEvents();

            }
            // 2) Dropping in a location from the side-pane?
            else {
                const dataJson = e.dataTransfer.getData("application/json") || "{}";
                const data = JSON.parse(dataJson);
                const name = data.name || e.dataTransfer.getData("text/plain");
                const placeId = data.placeId || "";
                const type = window.draggedType || "restaurant";
                const rawHour = parseFloat(slot.dataset.hour);
                const start = Math.round(rawHour * 2) / 2;

                addEvent(name, type, start, placeId);
            }
        });

        hourSlotsContainer.appendChild(slot);
    }

    // Global events array.
    const events = [];
    const defaultDurations = {
        restaurant: 2,
        hotel: 1,
        park: 2,
        shopping_mall: 2,
        museum: 2
    };

    // Utility: Check if a time range is free (no overlapping event)
    function isRangeFree(start, duration, ignoreEvent) {
        const eps = 0.0001;
        const desiredEnd = start + duration - eps;
        for (let ev of events) {
            if (ev === ignoreEvent) continue;
            const evEnd = ev.start + ev.duration - eps;
            // overlap if ev.start < desiredEnd && evEnd > start
            if (ev.start < desiredEnd && evEnd > start) return false;
        }
        return true;
    }

    function renderEvents() {
        document.querySelectorAll(".event").forEach(el => el.remove());
        for (let calendarEvent of events) {
            const evEl = document.createElement("div");
            evEl.className = "event";
            evEl.style.top = ((calendarEvent.start - fullStartHour) * slotHeight) + "px";
            evEl.style.height = (calendarEvent.duration * slotHeight - 2) + "px";

            const content = document.createElement("div");
            content.className = "content";
            content.textContent = calendarEvent.name;
            evEl.appendChild(content);

            const removeBtn = document.createElement("button");
            removeBtn.className = "remove-btn";
            removeBtn.textContent = "X";
            removeBtn.addEventListener("click", function (e) {
                e.stopPropagation();

                const activityId = calendarEvent.scheduleActivityId;
                if (!activityId) {
                    console.warn("Cannot delete an unsaved event.");
                    return;
                }

                fetch(`/Home/DeleteScheduleActivity?id=${activityId}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (!response.ok) throw new Error("Delete failed");
                        // On success, remove from local array and re‑render
                        const idx = events.indexOf(calendarEvent);
                        if (idx > -1) {
                            events.splice(idx, 1);
                            renderEvents();
                        }
                    })
                    .catch(err => {
                        console.error("Error deleting schedule activity:", err);
                        alert("Could not delete the event. Please try again.");
                    });
            });

            evEl.appendChild(removeBtn);

            const topHandle = document.createElement("div");
            topHandle.classList.add("handle", "top");
            evEl.appendChild(topHandle);

            const bottomHandle = document.createElement("div");
            bottomHandle.classList.add("handle", "bottom");
            evEl.appendChild(bottomHandle);

            // Make the event draggable
            evEl.setAttribute("draggable", "true");

            // Tell WebKit (Chrome/Safari) that this element should be draggable
            evEl.style.webkitUserDrag = "element";

            evEl.addEventListener("dragstart", function (e) {
                calendarEvent._oldStart = calendarEvent.start;

                 // Hide the real element IMMEDIATELY - before anything else
                evEl.style.visibility = "hidden";
                evEl.style.opacity = "0";

                // Build a drag image off-screen
                const dragIcon = evEl.cloneNode(true);
                const rect = evEl.getBoundingClientRect();

                Object.assign(dragIcon.style, {
                    position: "absolute",
                    top: "-1000px",    // off-screen
                    left: "0",
                    width: rect.width + "px",
                    height: rect.height + "px",
                    background: "#007bff",
                    backgroundImage: "none",
                    filter: "none",
                    opacity: "1",
                    boxSizing: "border-box",
                    visibility: "visible",
                    webkitUserDrag: "none"  // don’t let the clone itself be draggable
                });

                document.body.appendChild(dragIcon);
                e.dataTransfer.setDragImage(dragIcon, 20, 10);
                e.dataTransfer.effectAllowed = "move";


                // payloads
                e.dataTransfer.setData("application/json",
                    JSON.stringify({ name: calendarEvent.name, placeId: calendarEvent.placeId }));
                e.dataTransfer.setData("text/plain", calendarEvent.name);

                setTimeout(() => {
                   if (dragIcon && dragIcon.parentNode === document.body) {
                       document.body.removeChild(dragIcon);
                   }
                }, 1);

                window.draggedEvent = evEl;
                window.draggedEventObj = calendarEvent;
            });

            evEl.addEventListener("dragend", function () {
                 evEl.style.visibility = "visible";
                 evEl.style.opacity = "1";

                window.draggedEvent = null;
                window.draggedEventObj = null;

                // Clean up any remaining drag images
                const remainingDragImages = document.querySelectorAll('div[style*="position: absolute"][style*="top: -1000px"]');
                remainingDragImages.forEach(img => {
                    if (img.parentNode === document.body) {
                     document.body.removeChild(img);
                    }
                });
            });

            calendarEl.appendChild(evEl);
            calendarEvent.element = evEl;
            attachResizeHandles(calendarEvent);
        }
    }

    // Add new event (either via drop or "Add to Schedule" button)
    function addEvent(locationName, type, targetHour, locationId = "") {
        let duration = defaultDurations[type] || 1;
        while (!isRangeFree(targetHour, duration) && targetHour + duration <= fullEndHour) {
            targetHour++;
        }
        if (targetHour + duration > fullEndHour) {
            alert("No available slot for " + locationName);
            return;
        }
        // Create the new event object.
        const calendarEvent = {
            name: locationName,
            type: type,
            start: targetHour,
            duration: duration,
            placeId: locationId,
            scheduleActivityId: 0
        };
        //events.push(calendarEvent);
        //renderEvents();

        // Immediately persist this new event in the database.
        createScheduleActivity(calendarEvent);
    }

    // Helper: Create a new schedule activity in the database.
    function createScheduleActivity(calendarEvent) {
        // Use local date string for schedule. (Assumes currentDate holds the view date.)
        let scheduleDateIso = getLocalDateStr(currentDate);
        // Get schedule ID from Razor.
        let scheduleId = @ViewBag.Schedule.ScheduleId;

        // Prepare the data using the event’s current properties.
        let startHourInt = Math.floor(calendarEvent.start);
        let startMinute = Math.round((calendarEvent.start - startHourInt) * 60);
        let end = calendarEvent.start + calendarEvent.duration;
        let endHourInt = Math.floor(end);
        let endMinute = Math.round((end - endHourInt) * 60);

        const activityData = {
            ScheduleId: scheduleId,
            Name: calendarEvent.name,
            PlaceId: calendarEvent.placeId,
            Type: calendarEvent.type,
            StartHour: startHourInt,
            EndHour: endHourInt,
            StartMinute: startMinute,
            EndMinute: endMinute,
            StartDate: scheduleDateIso,
            EndDate: scheduleDateIso,
            AddInfo: ""
        };

        fetch('/Home/CreateScheduleActivity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(activityData)
        })
            .then(response => response.json())
            .then(data => {
                // Assume the response contains the created activity record, including its ScheduleActivity_Id.
                if (data && data.scheduleActivity && data.scheduleActivity.scheduleActivityId) {
                    calendarEvent.scheduleActivityId = data.scheduleActivity.scheduleActivityId;
                }

                console.log("Created schedule activity:", data);
                events.push(calendarEvent);
                renderEvents();
            })
            .catch(err => console.error("Error creating schedule activity:", err));



    }

    // Helper: Update an existing schedule activity in the database.
    function updateScheduleActivity(calendarEvent) {
        if (!calendarEvent.scheduleActivityId) {
            console.warn("No ScheduleActivityId defined for event, cannot update.");
            return;
        }
        let scheduleDateIso = getLocalDateStr(currentDate);
        let scheduleId = @ViewBag.Schedule.ScheduleId;

        let startHourInt = Math.floor(calendarEvent.start);
        let startMinute = Math.round((calendarEvent.start - startHourInt) * 60);
        let end = calendarEvent.start + calendarEvent.duration;
        let endHourInt = Math.floor(end);
        let endMinute = Math.round((end - endHourInt) * 60);

        const activityData = {
            ScheduleActivityId: calendarEvent.scheduleActivityId,
            ScheduleId: scheduleId,
            Name: calendarEvent.name,
            PlaceId: calendarEvent.placeId,
            Type: calendarEvent.type,
            StartHour: startHourInt,
            EndHour: endHourInt,
            StartMinute: startMinute,
            EndMinute: endMinute,
            StartDate: scheduleDateIso,
            EndDate: scheduleDateIso,
            AddInfo: ""
        };

        fetch('/Home/UpdateScheduleActivity', {
            method: 'PUT', // using PUT for updating
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(activityData)
        })
            .then(response => response.json())
            .then(data => console.log("Updated schedule activity:", data))
            .catch(err => console.error("Error updating schedule activity:", err));



    }

    function attachResizeHandles(calendarEvent) {
        const evEl = calendarEvent.element;
        const topHandle = evEl.querySelector(".handle.top");
        const bottomHandle = evEl.querySelector(".handle.bottom");

        let startY, startDuration, startHourVal;

        topHandle.addEventListener("mousedown", function (e) {
            e.stopPropagation();
            startY = e.clientY;
            startDuration = calendarEvent.duration;
            startHourVal = calendarEvent.start;
            document.addEventListener("mousemove", onTopResize);
            document.addEventListener("mouseup", stopResize);

        });

        bottomHandle.addEventListener("mousedown", function (e) {
            e.stopPropagation();
            startY = e.clientY;
            startDuration = calendarEvent.duration;
            document.addEventListener("mousemove", onBottomResize);
            document.addEventListener("mouseup", stopResize);

        });

        function onTopResize(e) {
            const diff = e.clientY - startY;
            const diffHours = diff / slotHeight;
            let newStart = startHourVal + diffHours;
            newStart = Math.round(newStart * 2) / 2;
            let newDuration = startDuration - (newStart - startHourVal);

            if (newStart < fullStartHour || newDuration < 0.5 || !isRangeFree(newStart, newDuration, calendarEvent)) return;
            calendarEvent.start = newStart;
            calendarEvent.duration = newDuration;
            renderEvents();
            updateScheduleActivity(calendarEvent);
        }

        function onBottomResize(e) {
            const diff = e.clientY - startY;
            const diffHours = diff / slotHeight;
            let newDuration = startDuration + diffHours;
            newDuration = Math.round(newDuration * 2) / 2;

            if (
                calendarEvent.start + newDuration > fullEndHour ||
                newDuration < 0.5 ||
                !isRangeFree(calendarEvent.start, newDuration, calendarEvent)
            ) return;
            calendarEvent.duration = newDuration;
            renderEvents();
            updateScheduleActivity(calendarEvent);
        }

        function stopResize() {
            document.removeEventListener("mousemove", onTopResize);
            document.removeEventListener("mousemove", onBottomResize);
            document.removeEventListener("mouseup", stopResize);

        }

    }

    function parseDateAsLocal(dateStr) {
        // Ensure only the date portion is used (first 10 characters).
        let dStr = dateStr.substring(0, 10);
        const [yyyy, mm, dd] = dStr.split('-');
        return new Date(+yyyy, +mm - 1, +dd, 0, 0, 0);
    }

    // Helper: Format a Date object to "YYYY-MM-DD" using local date parts.
    function getLocalDateStr(date) {
        const yyyy = date.getFullYear();
        const mm = (date.getMonth() + 1).toString().padStart(2, '0');
        const dd = date.getDate().toString().padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }
    // Update navigation arrow buttons based on the current date.
    function updateNavButtons() {
        const scheduleStartDate = new Date(scheduleDate); // scheduleDate is the schedule’s start date string.
        const prevDayBtn = document.getElementById("prevDayBtn");
        const nextDayBtn = document.getElementById("nextDayBtn");

        // Hide previous button if currentDate equals the schedule start date.
        if (getLocalDateStr(currentDate) === getLocalDateStr(scheduleStartDate)) {
            prevDayBtn.style.visibility = "hidden";
        } else {
            prevDayBtn.style.visibility = "visible";
        }

        // Hide next button if currentDate equals the schedule end date.
        if (getLocalDateStr(currentDate) === getLocalDateStr(scheduleEndDate)) {
            nextDayBtn.style.visibility = "hidden";
        } else {
            nextDayBtn.style.visibility = "visible";
        }
    }

    function updateCalendarForCurrentDate() {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        calendarHeaderEl.textContent = "Schedule for " + currentDate.toLocaleDateString(undefined, options);

        events.length = 0;

        // Get the current date as a local date string.
        const currentDateStr = getLocalDateStr(currentDate);
        console.log("Current date for rendering:", currentDateStr);
        fetch(`/Home/GetScheduleActivities?id=${scheduleId}`, {
            method: 'GET'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to fetch schedule activities");
                }
                return response.json();           // ← parse JSON
            })
            .then(data => {
                // ‘data’ is now the array of ScheduleActivity from your controller
                savedActivities = data;
                console.log("Loaded activities:", savedActivities);
                // Loop through each saved activity.
                savedActivities.forEach(activity => {
                    // Parse the activity's Start_Date as a local date and format it.
                    let activityDateStr = getLocalDateStr(parseDateAsLocal(activity.startDate));
                    console.log("Checking activity:", activity.name, "with date", activityDateStr);

                    if (activityDateStr === currentDateStr) {
                        const startHour = activity.startHour + ((activity.startMinute || 0) / 60);
                        const endHour = activity.endHour + ((activity.endMinute || 0) / 60);
                        const duration = endHour - startHour;
                        events.push({
                            name: activity.name,
                            type: activity.type,
                            start: startHour,
                            duration: duration,
                            placeId: activity.place_Id,
                            scheduleActivityId: activity.scheduleActivityId
                        });
                    }
                });
                renderEvents();
                updateNavButtons();
            })
            .catch(err => {
                console.error("Error updating json:", err);
                alert("Could not load activities. Please try again.");
            });

    }


        // ===================================================
    // FAST IMAGE LOADER WITH GOOGLE MAPS STATIC API FALLBACK
    // ===================================================
    class FastImageLoader {
        constructor() {
            this.queue = [];
            this.isProcessing = false;
            this.maxConcurrent = 3;
            this.activeLoads = 0;
            this.loadDelay = 300;
        }

        addToQueue(photoUrl, placeName, placeLocation, container, size = 100) {
            this.queue.push({ photoUrl, placeName, placeLocation, container, size });
            this.processQueue();
        }

        async processQueue() {
            if (this.isProcessing || this.queue.length === 0) {
                return;
            }

            this.isProcessing = true;

            while (this.queue.length > 0 && this.activeLoads < this.maxConcurrent) {
                const item = this.queue.shift();
                this.loadImageFast(item);
                await this.delay(this.loadDelay);
            }

            this.isProcessing = false;
        }

        loadImageFast({ photoUrl, placeName, placeLocation, container, size }) {
            this.activeLoads++;

            const cleanup = () => {
                this.activeLoads--;
                this.processQueue();
            };

            if (photoUrl) {
                const img = new Image();
                let timeoutId;

                const onSuccess = () => {
                    clearTimeout(timeoutId);
                    img.style.width = `${size}px`;
                    img.style.height = `${size}px`;
                    img.style.borderRadius = "8px";
                    img.style.objectFit = "cover";
                    img.alt = placeName;

                    container.innerHTML = '';
                    container.appendChild(img);
                    cleanup();
                };

                const onError = () => {
                    clearTimeout(timeoutId);
                    console.log(`Using map view for ${placeName}`);
                    this.createMapView(placeName, placeLocation, container, size);
                    cleanup();
                };

                timeoutId = setTimeout(onError, 2000);

                img.onload = onSuccess;
                img.onerror = onError;
                img.src = photoUrl;
            } else {
                this.createMapView(placeName, placeLocation, container, size);
                cleanup();
            }
        }

        createMapView(placeName, placeLocation, container) {
        if (!placeLocation) {
            this.createFallbackImage(placeName, container);
            return;
        }

        // Handle both Google Maps objects and plain objects from service
        const lat = typeof placeLocation.lat === 'function' ? placeLocation.lat() : placeLocation.lat;
        const lng = typeof placeLocation.lng === 'function' ? placeLocation.lng() : placeLocation.lng;

        const mapUrl = `https://maps.googleapis.com/maps/api/staticmap?` +
            `center=${lat},${lng}&` +
            `zoom=17&` +
            `size=100x100&` +
            `maptype=roadmap&` +
            `style=feature:poi|visibility:on&` +
            `style=feature:transit|visibility:simplified&` +
            `key=${googleApiKey}`;

        const img = document.createElement("img");
        img.src = mapUrl;
        img.className = 'map-image';
        img.alt = `Map view of ${placeName}`;
        img.title = `Location: ${placeName}`;

        img.onload = () => {
            container.innerHTML = '';
            container.appendChild(img);
        };

        img.onerror = () => {
            this.createFallbackImage(placeName, container);
        };
    }
        createFallbackImage(placeName, container, size, type = 'default') {
            const typeIcons = {
                restaurant: '🍽️',
                hotel: '🏨',
                park: '🌳',
                museum: '🏛️',
                shopping_mall: '🛍️',
                search: '📍',
                default: '📍'
            };

            const typeColors = {
                restaurant: 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)',
                hotel: 'linear-gradient(135deg, #007bff 0%, #0056b3 100%)',
                park: 'linear-gradient(135deg, #28a745 0%, #20c997 100%)',
                museum: 'linear-gradient(135deg, #6f42c1 0%, #5a32a3 100%)',
                shopping_mall: 'linear-gradient(135deg, #fd79a8 0%, #e84393 100%)',
                search: 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)',
                default: 'linear-gradient(135deg, #636e72 0%, #2d3436 100%)'
            };

            container.innerHTML = `
                <div style="
                    width: ${size}px;
                    height: ${size}px;
                    background: ${typeColors[type] || typeColors.default};
                    border-radius: 8px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: ${size > 80 ? '24px' : '20px'};
                    border: 2px solid rgba(255,255,255,0.3);
                ">
                    ${typeIcons[type] || typeIcons.default}
                </div>
            `;
        }

        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    }

            // ===================================================
        // HELPER FUNCTIONS AND CONSTANTS
        // ===================================================

    function isLocationInCityBounds(place, cityBounds) {
        if (!place.geometry || !place.geometry.location) {
            return false;
        }

        // If no city bounds available, be more permissive
        if (!cityBounds) {
            return true;
        }

        const location = place.geometry.location;
        const lat = typeof location.lat === 'function' ? location.lat() : location.lat;
        const lng = typeof location.lng === 'function' ? location.lng() : location.lng;

        const northeast = cityBounds.getNorthEast();
        const southwest = cityBounds.getSouthWest();

        return lat <= northeast.lat() &&
               lat >= southwest.lat() &&
               lng <= northeast.lng() &&
               lng >= southwest.lng();
    }


    function isPlaceInTargetCity(place, targetCityName) {
        if (!targetCityName || targetCityName.trim() === '') {
            return true; // If no target city specified, allow all
        }

        const address = (place.vicinity || place.formatted_address || '').toLowerCase();
        const cityLower = targetCityName.toLowerCase().trim();

        // Handle different city name formats
        const cityVariations = [
            cityLower,
            cityLower.replace(/\s+/g, ''), // Remove spaces
            cityLower.split(' ')[0], // First word only
            cityLower.replace(/city|town|municipality/gi, '').trim()
        ];

        return cityVariations.some(variation =>
            variation && address.includes(variation)
        );
    }
        // Enhanced location types with icons
    const locationsTypes = ["search", "restaurant", "hotel", "park", "museum", "shopping_mall"];
    const locationsTypeNames = {
            search: "🔍 Search",
            restaurant: "🍽️ Restaurants",
            hotel: "🏨 Hotels",
            park: "🌳 Parks",
            museum: "🏛️ Museums",
            shopping_mall: "🛍️ Shopping"
        };

    const typeIcons = {
            restaurant: '🍽️',
            hotel: '🏨',
            park: '🌳',
            museum: '🏛️',
            shopping_mall: '🛍️',
            search: '🔍'
        };


        // Initialize the image loader
    const imageLoader = new FastImageLoader();

        // Create enhanced image container with loading state
    function createImageContainer(placeName, size = 100) {
            const container = document.createElement("div");
            container.style.width = `${size}px`;
            container.style.height = `${size}px`;
            container.style.marginRight = "15px";
            container.style.display = "inline-block";
            container.style.position = "relative";
            container.style.backgroundColor = "#f8f9fa";
            container.style.borderRadius = "8px";

            container.innerHTML = `
                <div style="
                    width: 100%;
                    height: 100%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: #6c757d;
                    font-size: 12px;
                    background: #e9ecef;
                    border-radius: 8px;
                ">
                    ⏳
                </div>
            `;

            return container;
        }

       window.toggleDetails = function (header) {
        document.querySelectorAll(".activity-details").forEach(d => {
            if (d !== header.nextSibling) {
                d.style.display = "none";
            }
        });

        const det = header.nextSibling;
        if (det.style.display === "none" || det.style.display === "") {
            det.style.display = "block";
            // Smooth scroll to the opened details
            setTimeout(() => {
                det.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 100);
        } else {
            det.style.display = "none";
        }
    };
    // ===================================================
    // GOOGLE PLACES & LOCATIONS TABS
    // ===================================================

    const allPlaces = {};
    const nextPageTokens = {};
    const loadingPlaces = {};
    window.draggedType = "";
    let cityViewport = null;

    // Initialize per‐type state
    locationsTypes.forEach(type => {
        allPlaces[type] = [];
        nextPageTokens[type] = null;
        loadingPlaces[type] = false;
    });

    function fetchTopLocations() {
        const tabsContainer = document.getElementById("locationTabs");
        const contentContainer = document.getElementById("locationTabContent");
        tabsContainer.innerHTML = "";
        contentContainer.innerHTML = "";

        // 1) Get city geometry & viewport
        const masterSvc = new google.maps.places.PlacesService(document.createElement("div"));

        console.log("Looking up city with placeId:", "@placeId");

        masterSvc.getDetails({ placeId: "@placeId" }, (city, status) => {
            if (status !== google.maps.places.PlacesServiceStatus.OK) {
                console.error("City lookup failed:", status);
                // Fallback: try to proceed without city bounds
                cityViewport = null;
                initializeTabsWithoutBounds();
                return;
            }

            console.log("City details loaded:", city);
            cityViewport = city.geometry.viewport;

            // Log the viewport bounds for debugging
            if (cityViewport) {
                const ne = cityViewport.getNorthEast();
                const sw = cityViewport.getSouthWest();
                console.log("City viewport bounds:", {
                    northeast: { lat: ne.lat(), lng: ne.lng() },
                    southwest: { lat: sw.lat(), lng: sw.lng() }
                });
            }

            initializeTabs();
        });
    }

    function initializeTabsWithoutBounds() {
        console.log("Initializing tabs without city bounds - using fallback approach");
        // Create a fallback viewport if city lookup failed
        cityViewport = null;
        initializeTabs();
    }

    function initializeTabs() {
        const tabsContainer = document.getElementById("locationTabs");
        const contentContainer = document.getElementById("locationTabContent");

        // 2) Build one tab+pane per category
        locationsTypes.forEach((type, idx) => {
            // Tab button with enhanced styling
            const tabLink = document.createElement("a");
            tabLink.innerHTML = locationsTypeNames[type];
            tabLink.dataset.type = type;
            tabLink.classList.add("nav-link");
            tabLink.style.cssText = `
                padding: 10px 15px;
                margin: 0 2px;
                border-radius: 6px;
                transition: all 0.3s ease;
                text-decoration: none;
                border: 1px solid transparent;
            `;

            if (idx === 0) {
                tabLink.classList.add("active");
                tabLink.style.backgroundColor = "#007bff";
                tabLink.style.color = "white";
            }

            tabLink.addEventListener("click", e => {
                e.preventDefault();
                document.querySelectorAll("#locationTabs .nav-link").forEach(l => {
                    l.classList.remove("active");
                    l.style.backgroundColor = "";
                    l.style.color = "";
                });
                document.querySelectorAll("#locationTabContent > div").forEach(p => p.classList.remove("active"));

                tabLink.classList.add("active");
                tabLink.style.backgroundColor = "#007bff";
                tabLink.style.color = "white";
                pane.classList.add("active");

                // Apply filters after tab switch if content is loaded
                setTimeout(() => {
                    if (contentLoadedFlags[type]) {
                        applyFiltersToCurrentTab();
                    }
                }, 100);
            });

            const li = document.createElement("li");
            li.appendChild(tabLink);
            tabsContainer.appendChild(li);

            // Content pane with enhanced styling
            const pane = document.createElement("div");
            pane.id = type;
            pane.style.cssText = `
                min-height: 400px;
                border-radius: 8px;
            `;

            if (idx === 0) pane.classList.add("active");
            contentContainer.appendChild(pane);

            if (type === "search") {
                const searchContainer = document.createElement("div");
                searchContainer.className = "search-container";
                searchContainer.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 10px; background: white;">
                        <span style="font-size: 20px;">🔍</span>
                        <input type="text" class="search-input" placeholder="Search for places..." style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 6px; font-size: 16px;" />
                        <button class="search-btn" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;">Search</button>
                    </div>
                `;
                pane.appendChild(searchContainer);

                const searchInput = searchContainer.querySelector('.search-input');
                const searchBtn = searchContainer.querySelector('.search-btn');

                searchBtn.addEventListener('click', () => {
                    const searchTerm = searchInput.value.trim();
                    performCustomSearch(searchTerm, pane);
                });

                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        const searchTerm = searchInput.value.trim();
                        performCustomSearch(searchTerm, pane);
                    }
                });
                return;
            }

            // Add loading indicator with beautiful styling
            const loadingDiv = document.createElement("div");
            loadingDiv.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #666;">
                    <div style="font-size: 48px; margin-bottom: 15px;">${typeIcons[type]}</div>
                    <div style="font-size: 18px; font-weight: 500;">Loading top ${locationsTypeNames[type].replace(/🔍|🍽️|🏨|🌳|🏛️|🛍️/, '').trim()}...</div>
                    <div style="margin-top: 10px; font-size: 14px; color: #999;">Finding the best rated places for you</div>
                </div>
            `;
            pane.appendChild(loadingDiv);

            // Build and execute the search request
            loadLocationsByType(type, pane, loadingDiv, cityViewport);
        });
    }

             // Enhanced category filtering functions
    function isStrictlyOfType(place, targetType) {
        if (!place.types || place.types.length === 0) return false;

        // Define strict type mappings
        const strictTypeCategories = {
            restaurant: {
                required: ['restaurant', 'meal_takeaway', 'meal_delivery', 'food', 'cafe', 'bar'],
                forbidden: ['lodging', 'hotel', 'resort', 'park', 'museum', 'shopping_mall', 'store']
            },
            hotel: {
                required: ['lodging', 'hotel', 'resort', 'hostel', 'motel', 'bed_and_breakfast', 'guest_house', 'serviced_apartment'],
                forbidden: ['restaurant', 'park', 'museum', 'shopping_mall']
            },
            park: {
                required: ['park', 'natural_feature', 'campground', 'rv_park'],
                forbidden: ['restaurant', 'lodging', 'hotel', 'museum', 'shopping_mall', 'store']
            },
            museum: {
                required: ['museum', 'art_gallery', 'library', 'cultural_center'],
                forbidden: ['restaurant', 'lodging', 'hotel', 'park', 'shopping_mall', 'store']
            },
            shopping_mall: {
                required: ['shopping_mall', 'department_store', 'store', 'clothing_store', 'shoe_store', 'electronics_store', 'furniture_store', 'home_goods_store'],
                forbidden: ['restaurant', 'lodging', 'hotel', 'park', 'museum']
            }
        };

        const category = strictTypeCategories[targetType];
        if (!category) return false;

        // Check if place has any forbidden types
        const hasForbiddenType = place.types.some(type => category.forbidden.includes(type));
        if (hasForbiddenType) {
            console.log(`Excluding ${place.name} from ${targetType}: has forbidden type(s) - ${place.types.filter(t => category.forbidden.includes(t)).join(', ')}`);
            return false;
        }

        // Check if place has any required types
        const hasRequiredType = place.types.some(type => category.required.includes(type));
        if (!hasRequiredType) {
            console.log(`Excluding ${place.name} from ${targetType}: missing required type. Has: ${place.types.join(', ')}`);
            return false;
        }

        return true;
    }

    function filterByNameKeywords(place, targetType) {
        const name = place.name.toLowerCase();

        // Additional name-based filtering for edge cases
        const nameFilters = {
            restaurant: {
                forbidden: ['park', 'museum', 'hotel', 'mall', 'shopping']
            },
            hotel: {
                forbidden: ['park', 'museum', 'restaurant']
            },
            park: {
                forbidden: ['hotel', 'restaurant', 'museum', 'mall', 'shopping'],
                required: ['park', 'garden', 'square', 'green']
            },
            museum: {
                forbidden: ['park', 'hotel', 'restaurant', 'mall', 'shopping'],
                required: ['museum', 'gallery', 'cultural', 'history', 'art']
            },
            shopping_mall: {
                forbidden: ['park', 'hotel', 'restaurant', 'museum'],
                required: ['mall', 'shopping', 'center', 'store', 'market']
            }
        };

        const filter = nameFilters[targetType];
        if (!filter) return true;

        // Check forbidden keywords in name
        if (filter.forbidden && filter.forbidden.some(keyword => name.includes(keyword))) {
            console.log(`Excluding ${place.name} from ${targetType}: forbidden keyword in name`);
            return false;
        }

        // For certain categories, require specific keywords in name
        if (filter.required && !filter.required.some(keyword => name.includes(keyword))) {
            // Only apply strict name requirements for parks and museums
            if (targetType === 'park' || targetType === 'museum') {
                console.log(`Excluding ${place.name} from ${targetType}: missing required keyword in name`);
                return false;
            }
        }

        return true;
    }
    function applyFiltersToCurrentTab() {
        const activeTab = document.querySelector("#locationTabs .nav-link.active");
        if (!activeTab) return;

        const currentType = activeTab.dataset.type;

        if (currentType === "filters" || currentType === "search") return;

        if (!contentLoadedFlags[currentType]) {
            console.log(`Content for ${currentType} not loaded yet, skipping filter application`);
            return;
        }

        const currentPane = document.getElementById(currentType);
        if (!currentPane) return;

        // Show all items (no filtering)
        const activityItems = currentPane.querySelectorAll('.activity-header');
        let visibleCount = 0;

        activityItems.forEach(header => {
            const item = header.parentElement;
            item.style.display = 'block';
            visibleCount++;
        });

        // Update or add load more indicator based on visible results
        const existingIndicator = currentPane.querySelector('.load-more-indicator');
        if (existingIndicator) {
            existingIndicator.remove();
        }

        // Only show load more if we have more places to load
        if (loadedPlaceCounts[currentType] < allSortedPlaces[currentType].length) {
            addLoadMoreIndicator(currentType, currentPane);
        }
    }
    // Updated comprehensive search function with strict filtering
    const INITIAL_LOAD_COUNT = 5;
    const LOAD_MORE_COUNT = 10;
    const allSortedPlaces = {}; // Store all sorted places for each type
    const loadedPlaceCounts = {}; // Track how many places are loaded for each type
    const isLoadingMore = {}; // Track loading state for each type

    // Initialize per-type pagination state
    locationsTypes.forEach(type => {
        allSortedPlaces[type] = [];
        loadedPlaceCounts[type] = 0;
        isLoadingMore[type] = false;
    });


       function loadLocationsByType(type, pane, loadingDiv, viewport) {
        console.log(`Starting search for ${type} locations`);

        const cityName = "@ViewBag.CityName" || "";
        const cityPlaceId = "@ViewBag.PlaceId" || "";

        // Use the new service endpoint
        const endpoint = `/Home/GetLocationsByType?cityPlaceId=${encodeURIComponent(cityPlaceId)}&cityName=${encodeURIComponent(cityName)}&locationType=${type}&maxResults=50`;

        fetch(endpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(finalResults => {
                // Remove loading indicator
                loadingDiv.remove();

                if (finalResults.length === 0) {
                    pane.innerHTML += `
                        <div style="text-align: center; padding: 40px; color: #999;">
                            <div style="font-size: 48px; margin-bottom: 15px;">${typeIcons[type]}</div>
                            <div style="font-size: 18px;">No ${locationsTypeNames[type].replace(/🔍|🍽️|🏨|🌳|🏛️|🛍️/, '').trim().toLowerCase()} found</div>
                            <div style="font-size: 14px; margin-top: 10px; color: #666;">Try the search tab to find specific places</div>
                        </div>
                    `;
                    return;
                }

                console.log(`Displaying initial ${Math.min(INITIAL_LOAD_COUNT, finalResults.length)} ${type} locations`);

                // Store all sorted results for pagination
                allSortedPlaces[type] = finalResults;

                // Load initial batch
                loadMorePlaces(type, pane, INITIAL_LOAD_COUNT);

                // Add scroll detection for infinite loading
                setupInfiniteScrolling(type, pane);

                // Mark this tab's content as loaded
                contentLoadedFlags[type] = true;

                // Apply filters after initial places are loaded
                setTimeout(() => {
                    if (pane.classList.contains('active')) {
                        applyFiltersToCurrentTab();
                    }
                }, 200);

            })
            .catch(error => {
                console.error(`Failed to load ${type} locations:`, error);
                loadingDiv.remove();
                pane.innerHTML += `
                    <div style="text-align: center; padding: 40px; color: #dc3545;">
                        <div style="font-size: 48px; margin-bottom: 15px;">❌</div>
                        <div style="font-size: 18px;">Error loading ${locationsTypeNames[type].replace(/🔍|🍽️|🏨|🌳|🏛️|🛍️/, '').trim().toLowerCase()}</div>
                        <div style="font-size: 14px; margin-top: 10px;">Please try again later</div>
                    </div>
                `;
            });
    }
    // Make sure the isRelatedToType function is defined at the global scope
    function isRelatedToType(place, targetType) {
        if (!place.types || place.types.length === 0) return false;

        const relatedTypes = {
            restaurant: ['restaurant', 'food', 'meal_takeaway', 'meal_delivery', 'cafe', 'bar', 'bakery'],
            hotel: ['lodging', 'hotel', 'resort', 'hostel', 'motel', 'bed_and_breakfast', 'guest_house'],
            park: ['park', 'natural_feature', 'campground', 'rv_park', 'zoo'],
            museum: ['museum', 'art_gallery', 'library', 'cultural_center', 'gallery'],
            shopping_mall: ['shopping_mall', 'department_store', 'store', 'clothing_store', 'electronics_store']
        };

        const related = relatedTypes[targetType] || [];
        return place.types.some(type => related.includes(type));
    }     // Function to load more places for a specific type
       function loadMorePlaces(type, pane, count) {
        const sortedPlaces = allSortedPlaces[type] || [];
        const currentCount = loadedPlaceCounts[type];
        const endIndex = Math.min(currentCount + count, sortedPlaces.length);

        console.log(`Loading ${type} places ${currentCount} to ${endIndex} of ${sortedPlaces.length}`);

        // Load all places in the range (no filtering)
        const placesToLoad = sortedPlaces.slice(currentCount, endIndex);

        // Create place items
        placesToLoad.forEach((place, index) => {
            createEnhancedPlaceItem(place, currentCount + index, type, pane, new google.maps.places.PlacesService(document.createElement("div")));
        });

        // Update loaded count
        loadedPlaceCounts[type] = endIndex;

        // Remove loading indicator if it exists
        const existingLoader = pane.querySelector('.load-more-indicator');
        if (existingLoader) {
            existingLoader.remove();
        }

        // Add "Load More" indicator if there are more places to load
        if (endIndex < sortedPlaces.length) {
            addLoadMoreIndicator(type, pane);
        }
    }

    // Function to add a "Load More" indicator
    function addLoadMoreIndicator(type, pane) {
        const indicator = document.createElement("div");
        indicator.className = "load-more-indicator";
        indicator.style.cssText = `
            text-align: center;
            padding: 20px;
            margin: 20px 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: 2px dashed #007bff;
        `;

        const remainingCount = allSortedPlaces[type].length - loadedPlaceCounts[type];
        indicator.innerHTML = `
            <div style="color: #007bff; font-weight: 500; margin-bottom: 10px;">
                📍 ${remainingCount} more ${locationsTypeNames[type].replace(/🔍|🍽️|🏨|🌳|🏛️|🛍️/, '').trim().toLowerCase()} available
            </div>
            <div style="color: #666; font-size: 14px;">
                Scroll down to load more, or
                <button class="load-more-btn" style="background: none; border: none; color: #007bff; text-decoration: underline; cursor: pointer; font-size: 14px;">
                    click here to load ${Math.min(LOAD_MORE_COUNT, remainingCount)} more
                </button>
            </div>
        `;

        // Add click handler for manual loading
        const loadMoreBtn = indicator.querySelector('.load-more-btn');
        loadMoreBtn.addEventListener('click', () => {
            if (!isLoadingMore[type]) {
                loadMoreContent(type, pane);
            }
        });

        pane.appendChild(indicator);
    }

    // Function to setup infinite scrolling for a tab pane
    function setupInfiniteScrolling(type, pane) {
        // Create a scroll container if it doesn't exist
        if (!pane.dataset.hasScrollListener) {
            pane.dataset.hasScrollListener = "true";

            // Add scroll listener to the tab content container
            const scrollContainer = document.getElementById("locationTabContent");

            const scrollHandler = () => {
                // Only handle scroll if this is the active tab
                if (!pane.classList.contains('active')) return;

                const scrollTop = scrollContainer.scrollTop;
                const scrollHeight = scrollContainer.scrollHeight;
                const clientHeight = scrollContainer.clientHeight;

                // Trigger load more when user is near bottom (within 200px)
                if (scrollTop + clientHeight >= scrollHeight - 200) {
                    if (!isLoadingMore[type] && loadedPlaceCounts[type] < allSortedPlaces[type].length) {
                        loadMoreContent(type, pane);
                    }
                }
            };

            scrollContainer.addEventListener('scroll', scrollHandler);

            // Also listen for window scroll as backup
            window.addEventListener('scroll', () => {
                if (!pane.classList.contains('active')) return;

                const windowHeight = window.innerHeight;
                const documentHeight = document.documentElement.scrollHeight;
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

                if (scrollTop + windowHeight >= documentHeight - 300) {
                    if (!isLoadingMore[type] && loadedPlaceCounts[type] < allSortedPlaces[type].length) {
                        loadMoreContent(type, pane);
                    }
                }
            });
        }
    }

    // Function to load more content when scrolling
    function loadMoreContent(type, pane) {
        if (isLoadingMore[type] || loadedPlaceCounts[type] >= allSortedPlaces[type].length) {
            return;
        }

        isLoadingMore[type] = true;

        // Add loading indicator
        const loadingIndicator = document.createElement("div");
        loadingIndicator.className = "loading-more-indicator";
        loadingIndicator.style.cssText = `
            text-align: center;
            padding: 20px;
            color: #666;
            background: white;
            border-radius: 8px;
            margin: 10px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        `;
        loadingIndicator.innerHTML = `
            <div style="font-size: 20px; margin-bottom: 8px;">⏳</div>
            <div>Loading more ${locationsTypeNames[type].replace(/🔍|🍽️|🏨|🌳|🏛️|🛍️/, '').trim().toLowerCase()}...</div>
        `;

        // Remove any existing load more indicator
        const existingIndicator = pane.querySelector('.load-more-indicator');
        if (existingIndicator) {
            existingIndicator.remove();
        }

        pane.appendChild(loadingIndicator);

        // Simulate loading delay for better UX
        setTimeout(() => {
            loadMorePlaces(type, pane, LOAD_MORE_COUNT);
            loadingIndicator.remove();
            isLoadingMore[type] = false;

            // Re-apply filters to newly loaded content
            setTimeout(() => {
                if (pane.classList.contains('active')) {
                    applyFiltersToCurrentTab();
                }
            }, 100);
        }, 800);
    }

        function createEnhancedPlaceItem(place, index, type, pane, svc) {
        // Enhanced item styling
        const item = document.createElement("div");
        item.style.cssText = `
            margin-bottom: 15px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            overflow: hidden;
        `;

        // Add hover effect
        item.addEventListener('mouseenter', () => {
            item.style.transform = 'translateY(-2px)';
            item.style.boxShadow = '0 4px 16px rgba(0,0,0,0.15)';
        });
        item.addEventListener('mouseleave', () => {
            item.style.transform = 'translateY(0)';
            item.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
        });

        const header = document.createElement("div");
        const details = document.createElement("div");

        // Enhanced header styling
        header.classList.add("activity-header");
        header.style.cssText = `
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 15px;
            position: relative;
        `;
        header.setAttribute("draggable", "true");
        header.onclick = () => toggleDetails(header);
        header.addEventListener("dragstart", e => {
            e.dataTransfer.effectAllowed = "copy";
            e.dataTransfer.setData("text/plain", "");
            e.dataTransfer.setData("application/json",
                JSON.stringify({ name: place.name, placeId: place.placeId }));
            window.draggedType = type;
        });

        // Create image container with enhanced styling
        const imageContainer = createImageContainer(place.name, 100);

        // Enhanced info section
        const infoDiv = document.createElement("div");
        infoDiv.style.cssText = "flex: 1; min-width: 0;";

        // Fix property names to match service response
        const rating = place.rating || 0;
        const userRatingsTotal = place.userRatingsTotal || 0;
        const priceLevel = place.priceLevel;

        // Price display with better styling
        const priceSymbols = priceLevel && priceLevel > 0
            ? "$".repeat(priceLevel)
            : (priceLevel === 0 ? "Free" : "");

        const priceDisplay = priceSymbols ? `
            <div style="display: inline-flex; align-items: center; gap: 5px; margin-top: 5px;">
                <span style="color: #28a745; font-weight: 500;">💰 ${priceSymbols}</span>
            </div>
        ` : '';

        infoDiv.innerHTML = `
            <div style="margin-bottom: 8px;">
                <strong style="font-size: 18px; color: #333; display: block; margin-bottom: 4px;">${place.name}</strong>
                <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                    <span style="color: #ffc107; font-weight: 500;">⭐ ${rating.toFixed(1)}</span>
                    <span style="color: #666; font-size: 14px;">(${userRatingsTotal.toLocaleString()} reviews)</span>
                    ${priceDisplay}
                </div>
            </div>
            <div style="color: #999; font-size: 14px;">
                📍 ${place.vicinity || place.formattedAddress || 'Location available'}
            </div>
        `;

        header.appendChild(imageContainer);
        header.appendChild(infoDiv);

        // Enhanced details styling
        details.classList.add("activity-details");
        details.style.cssText = `
            display: none;
            padding: 20px;
            border-top: 1px solid #eee;
            background: #f8f9fa;
            font-size: 14px;
        `;
        details.innerHTML = `
            <div style="text-align: center; color: #666; padding: 20px;">
                <div style="font-size: 20px; margin-bottom: 10px;">⏳</div>
                <em>Loading detailed information...</em>
            </div>
        `;

        // Enhanced add button
        const addBtn = createAddButton(place, type);
        header.appendChild(addBtn);

        item.append(header, details);
        pane.appendChild(item);

    if (place.placeId) {
            // Use Places API to get the actual photo from the place ID
            const placesService = new google.maps.places.PlacesService(document.createElement("div"));
            placesService.getDetails({
                placeId: place.placeId,
                fields: ['photos']
            }, (placeDetails, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK && placeDetails && placeDetails.photos && placeDetails.photos.length > 0) {
                    // Get optimized photo URL
                    const photoUrl = placeDetails.photos[0].getUrl({
                        maxWidth: 100,
                        maxHeight: 100
                    });
                    imageLoader.addToQueue(
                        photoUrl,
                        place.name,
                        place.location,
                        imageContainer,
                        100
                    );
                } else {
                    // No photos available from Places API, use map view
                    imageLoader.createMapView(place.name, place.location, imageContainer);
                }
            });
        } else {
            // No place ID available, use fallback
            imageLoader.createFallbackImage(place.name, imageContainer, 100, type);
        }

        // Fetch enhanced details using service
        loadPlaceDetailsViaService(place, details);
    }

    function loadPlaceDetailsViaService(place, details) {
        if (!place.placeId) {
            details.innerHTML = `
                <div style="text-align: center; color: #999; padding: 20px;">
                    <div style="font-size: 20px; margin-bottom: 10px;">❌</div>
                    <p><em>Detailed information unavailable.</em></p>
                </div>
            `;
            return;
        }

        fetch(`/Home/GetPlaceDetails?placeId=${encodeURIComponent(place.placeId)}`)
            .then(response => response.json())
            .then(full => {
                if (!full) {
                    details.innerHTML = `
                        <div style="text-align: center; color: #999; padding: 20px;">
                            <div style="font-size: 20px; margin-bottom: 10px;">❌</div>
                            <p><em>Detailed information unavailable.</em></p>
                        </div>
                    `;
                    return;
                }

                // Enhanced tags with better styling
                const amenityTypes = ["no_smoking", "free_wifi", "parking", "wheelchair_accessible", "air_conditioning", "pet_friendly"];
                const tags = (full.types || [])
                    .filter(t => amenityTypes.includes(t))
                    .map(t => `
                        <span style="
                            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
                            color: #1976d2;
                            padding: 4px 8px;
                            margin: 2px;
                            border-radius: 12px;
                            font-size: 12px;
                            display: inline-block;
                            border: 1px solid #90caf9;
                        ">${t.replace(/_/g, " ")}</span>
                    `).join(" ") || `<span style="color: #999; font-style: italic;">No special amenities listed</span>`;

                // Enhanced opening hours - Updated to handle service response format
                const hours = full.openingHours?.weekdayText && full.openingHours.weekdayText.length > 0
                    ? `
                        <div style="margin: 15px 0;">
                            <h5 style="margin: 0 0 8px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                🕒 Opening Hours
                            </h5>
                            <div style="background: white; padding: 10px; border-radius: 6px; border-left: 4px solid #007bff;">
                                ${full.openingHours.weekdayText.map(d => `<div style="margin: 2px 0; font-size: 13px;">${d}</div>`).join("")}
                            </div>
                        </div>
                    ` : `
                        <div style="margin: 15px 0;">
                            <h5 style="margin: 0 0 8px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                🕒 Opening Hours
                            </h5>
                            <div style="background: white; padding: 10px; border-radius: 6px; border-left: 4px solid #ccc;">
                                <div style="margin: 2px 0; font-size: 13px; color: #666; font-style: italic;">Opening hours not available</div>
                            </div>
                        </div>
                    `;

                // Enhanced reviews with better styling
                const revs = (full.reviews || []).slice(0, 2)
                    .map(r => `
                        <div style="
                            margin-bottom: 12px;
                            padding: 12px;
                            background: white;
                            border-radius: 8px;
                            border-left: 4px solid #ffc107;
                        ">
                            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
                                <strong style="color: #333;">${r.authorName}</strong>
                                <span style="color: #ffc107; font-weight: 500;">⭐ ${r.rating}</span>
                            </div>
                            <p style="margin: 0; color: #666; font-size: 13px; line-height: 1.4;">${r.text}</p>
                        </div>
                    `).join("") || `<div style="color: #999; font-style: italic; text-align: center; padding: 10px;">No reviews available</div>`;

                details.innerHTML = `
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <h5 style="margin: 0 0 10px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                📍 Contact Information
                            </h5>
                            <div style="background: white; padding: 12px; border-radius: 6px;">
                                <p style="margin: 5px 0;"><strong>Address:</strong><br><span style="color: #666;">${full.formattedAddress}</span></p>
                                <p style="margin: 5px 0;"><strong>Phone:</strong><br><span style="color: #666;">${full.formattedPhoneNumber || 'N/A'}</span></p>
                                <p style="margin: 5px 0;"><strong>Website:</strong><br>
                                    ${full.website
                                        ? `<a href="${full.website}" target="_blank" style="color: #007bff; text-decoration: none;">${full.website}</a>`
                                        : '<span style="color: #666;">N/A</span>'
                                    }
                                </p>
                            </div>
                            ${hours}
                        </div>
                        <div>
                            <h5 style="margin: 0 0 10px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                ⭐ Reviews
                            </h5>
                            <div>
                                <h6 style="margin: 0 0 8px 0; color: #666;">Recent Reviews</h6>
                                <div style="max-height: 100%; overflow-y: auto;">${revs}</div>
                            </div>
                        </div>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <a href="https://www.google.com/maps/place/?q=place_id:${place.placeId}"
                           target="_blank"
                           style="
                               display: inline-flex;
                               align-items: center;
                               gap: 8px;
                               padding: 10px 20px;
                               background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
                               color: white;
                               text-decoration: none;
                               border-radius: 6px;
                               font-weight: 500;
                               transition: transform 0.2s ease;
                           "
                           onmouseover="this.style.transform='scale(1.05)'"
                           onmouseout="this.style.transform='scale(1)'">
                            🗺️ View on Google Maps
                        </a>
                    </div>
                `;
            })
            .catch(err => {
                console.error('Error loading place details:', err);
                details.innerHTML = `
                    <div style="text-align: center; color: #999; padding: 20px;">
                        <div style="font-size: 20px; margin-bottom: 10px;">❌</div>
                        <p><em>Error loading detailed information.</em></p>
                    </div>
                `;
            });
    }

    function loadPlaceDetails(place, details, svc) {
            svc.getDetails({
                placeId: place.place_id,
                fields: [
                    "formatted_address",
                    "formatted_phone_number",
                    "website",
                    "opening_hours",
                    "reviews",
                    "editorial_summary",
                    "types"
                ]
            }, (full, st2) => {
                if (st2 !== google.maps.places.PlacesServiceStatus.OK) {
                    details.innerHTML = `
                        <div style="text-align: center; color: #999; padding: 20px;">
                            <div style="font-size: 20px; margin-bottom: 10px;">❌</div>
                            <p><em>Detailed information unavailable.</em></p>
                        </div>
                    `;
                    return;
                }

                // Enhanced tags with better styling
                const amenityTypes = ["no_smoking", "free_wifi", "parking", "wheelchair_accessible", "air_conditioning", "pet_friendly"];
                const tags = (full.types || [])
                    .filter(t => amenityTypes.includes(t))
                    .map(t => `
                        <span style="
                            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
                            color: #1976d2;
                            padding: 4px 8px;
                            margin: 2px;
                            border-radius: 12px;
                            font-size: 12px;
                            display: inline-block;
                            border: 1px solid #90caf9;
                        ">${t.replace(/_/g, " ")}</span>
                    `).join(" ") || `<span style="color: #999; font-style: italic;">No special amenities listed</span>`;

                // Enhanced opening hours
                const hours = full.opening_hours?.weekday_text
                    ? `
                        <div style="margin: 15px 0;">
                            <h5 style="margin: 0 0 8px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                🕒 Opening Hours
                            </h5>
                            <div style="background: white; padding: 10px; border-radius: 6px; border-left: 4px solid #007bff;">
                                ${full.opening_hours.weekday_text.map(d => `<div style="margin: 2px 0; font-size: 13px;">${d}</div>`).join("")}
                            </div>
                        </div>
                    ` : "";

                // Enhanced reviews with better styling
                const revs = (full.reviews || []).slice(0, 2)
                    .map(r => `
                        <div style="
                            margin-bottom: 12px;
                            padding: 12px;
                            background: white;
                            border-radius: 8px;
                            border-left: 4px solid #ffc107;
                        ">
                            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
                                <strong style="color: #333;">${r.author_name}</strong>
                                <span style="color: #ffc107; font-weight: 500;">⭐ ${r.rating}</span>
                            </div>
                            <p style="margin: 0; color: #666; font-size: 13px; line-height: 1.4;">${r.text}</p>
                        </div>
                    `).join("") || `<div style="color: #999; font-style: italic; text-align: center; padding: 10px;">No reviews available</div>`;

                details.innerHTML = `
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <h5 style="margin: 0 0 10px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                📍 Contact Information
                            </h5>
                            <div style="background: white; padding: 12px; border-radius: 6px;">
                                <p style="margin: 5px 0;"><strong>Address:</strong><br><span style="color: #666;">${full.formatted_address}</span></p>
                                <p style="margin: 5px 0;"><strong>Phone:</strong><br><span style="color: #666;">${full.formatted_phone_number || 'N/A'}</span></p>
                                <p style="margin: 5px 0;"><strong>Website:</strong><br>
                                    ${full.website
                                        ? `<a href="${full.website}" target="_blank" style="color: #007bff; text-decoration: none;">${full.website}</a>`
                                        : '<span style="color: #666;">N/A</span>'
                                    }
                                </p>
                            </div>
                            ${hours}
                        </div>
                        <div>
                            <h5 style="margin: 0 0 10px 0; color: #495057; display: flex; align-items: center; gap: 8px;">
                                ⭐ Reviews
                            </h5>
                            <div>
                                <h6 style="margin: 0 0 8px 0; color: #666;">Recent Reviews</h6>
                                <div style="max-height: 100%; overflow-y: auto;">${revs}</div>
                            </div>
                        </div>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <a href="https://www.google.com/maps/place/?q=place_id:${place.place_id}"
                           target="_blank"
                           style="
                               display: inline-flex;
                               align-items: center;
                               gap: 8px;
                               padding: 10px 20px;
                               background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
                               color: white;
                               text-decoration: none;
                               border-radius: 6px;
                               font-weight: 500;
                               transition: transform 0.2s ease;
                           "
                           onmouseover="this.style.transform='scale(1.05)'"
                           onmouseout="this.style.transform='scale(1)'">
                            🗺️ View on Google Maps
                        </a>
                    </div>
                `;
            });
        }
        // Enhanced add button creation
    function createAddButton(place, type) {
            const addBtn = document.createElement("button");
            addBtn.innerHTML = "➕";
            addBtn.title = "Add to schedule";
            addBtn.style.cssText = `
                position: absolute;
                bottom: 15px;
                right: 15px;
                width: 36px;
                height: 36px;
                border-radius: 50%;
                border: none;
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                color: white;
                font-size: 16px;
                cursor: pointer;
                box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
            `;

            // Hide button if schedule dates are not valid
            if (!hasValidScheduleDates) {
                addBtn.style.display = "none";
            }

            addBtn.addEventListener('mouseenter', () => {
                addBtn.style.transform = 'scale(1.1)';
                addBtn.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.4)';
            });
            addBtn.addEventListener('mouseleave', () => {
                addBtn.style.transform = 'scale(1)';
                addBtn.style.boxShadow = '0 2px 8px rgba(40, 167, 69, 0.3)';
            });

            addBtn.onclick = (e) => {
                e.stopPropagation();
                const targetHour = selectedSlot ? +selectedSlot.dataset.hour : 8;
                addEvent(place.name, type, targetHour, place.place_id);

                // Visual feedback
                addBtn.innerHTML = "✓";
                addBtn.style.background = "linear-gradient(135deg, #28a745 0%, #20c997 100%)";
                setTimeout(() => {
                    addBtn.innerHTML = "➕";
                }, 1000);
            };

            return addBtn;
        }
    function performCustomSearch(searchTerm, targetPane) {
        if (!searchTerm.trim()) {
            alert("Please enter a search term");
            return;
        }

        const cityPlaceId = "@ViewBag.PlaceId" || "";
        const cityName = "@ViewBag.CityName" || "";
        const searchBtn = targetPane.querySelector('.search-btn');

        searchBtn.disabled = true;
        searchBtn.textContent = "Searching...";

        // Clear previous results but keep the search container
        const existingResults = targetPane.querySelectorAll('.search-result-item');
        existingResults.forEach(item => item.remove());

        // Add loading indicator
        const loadingDiv = document.createElement("div");
        loadingDiv.className = "search-result-item";
        loadingDiv.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #666;">
                <div style="font-size: 48px; margin-bottom: 15px;">🔍</div>
                <div style="font-size: 18px; font-weight: 500;">Searching for "${searchTerm}"...</div>
                <div style="margin-top: 10px; font-size: 14px; color: #999;">Finding the best places for you</div>
            </div>
        `;
        targetPane.appendChild(loadingDiv);

        // Use the new service endpoint
        const endpoint = `/Home/SearchPlaces?query=${encodeURIComponent(searchTerm)}&cityPlaceId=${encodeURIComponent(cityPlaceId)}&cityName=${encodeURIComponent(cityName)}`;

        fetch(endpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(results => {
                searchBtn.disabled = false;
                searchBtn.textContent = "Search";
                loadingDiv.remove();

                if (!results || results.length === 0) {
                    const noResults = document.createElement("div");
                    noResults.className = "search-result-item";
                    noResults.innerHTML = `
                        <div style="text-align: center; padding: 40px; color: #999;">
                            <div style="font-size: 48px; margin-bottom: 15px;">🔍</div>
                            <div style="font-size: 18px;">No results found for "${searchTerm}"</div>
                            <p style="margin-top: 10px; font-size: 14px;">Try a different search term or check your spelling</p>
                        </div>
                    `;
                    targetPane.appendChild(noResults);
                    return;
                }

                console.log(`Custom search found ${results.length} results`);

                // Create search results
                results.forEach((place, index) => {
                    createSearchResultItem(place, index, targetPane, null);
                });
            })
            .catch(error => {
                console.error('Search error:', error);
                searchBtn.disabled = false;
                searchBtn.textContent = "Search";
                loadingDiv.remove();

                const errorDiv = document.createElement("div");
                errorDiv.className = "search-result-item";
                errorDiv.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #dc3545;">
                        <div style="font-size: 48px; margin-bottom: 15px;">❌</div>
                        <div style="font-size: 18px;">Search failed</div>
                        <p style="margin-top: 10px; font-size: 14px;">Please try again later</p>
                    </div>
                `;
                targetPane.appendChild(errorDiv);
            });
    }
    // ===================================================
    // CREATE ENHANCED SEARCH RESULT ITEM
    // ===================================================
    function createSearchResultItem(place, index, targetPane, svc) {
        const item = document.createElement("div");
        item.className = "search-result-item";
        item.style.cssText = `
            margin-bottom: 15px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            overflow: hidden;
        `;

        // Add hover effect
        item.addEventListener('mouseenter', () => {
            item.style.transform = 'translateY(-2px)';
            item.style.boxShadow = '0 4px 16px rgba(0,0,0,0.15)';
        });
        item.addEventListener('mouseleave', () => {
            item.style.transform = 'translateY(0)';
            item.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
        });

        const header = document.createElement("div");
        const details = document.createElement("div");

        header.classList.add("activity-header");
        header.style.cssText = `
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 15px;
            position: relative;
        `;
        header.setAttribute("draggable", "true");
        header.onclick = () => toggleDetails(header);
        header.addEventListener("dragstart", e => {
            e.dataTransfer.effectAllowed = "copy";
            e.dataTransfer.setData("text/plain", "");
            e.dataTransfer.setData("application/json",
                JSON.stringify({ name: place.name, placeId: place.place_id }));

            // Determine type based on place types for drag behavior
            const placeTypes = place.types || [];
            if (placeTypes.includes('restaurant') || placeTypes.includes('food')) {
                window.draggedType = "restaurant";
            } else if (placeTypes.includes('lodging')) {
                window.draggedType = "hotel";
            } else if (placeTypes.includes('park')) {
                window.draggedType = "park";
            } else if (placeTypes.includes('museum')) {
                window.draggedType = "museum";
            } else if (placeTypes.includes('shopping_mall') || placeTypes.includes('store')) {
                window.draggedType = "shopping_mall";
            } else {
                window.draggedType = "search"; // default for search results
            }
        });

        // Create image container
        const imageContainer = createImageContainer(place.name, 100);

        // Enhanced info section
        const infoDiv = document.createElement("div");
        infoDiv.style.cssText = "flex: 1; min-width: 0;";

        const priceSymbols = place.price_level && place.price_level > 0
            ? "$".repeat(place.price_level)
            : (place.price_level === 0 ? "Free" : "");

        const priceDisplay = priceSymbols ? `
            <div style="display: inline-flex; align-items: center; gap: 5px; margin-top: 5px;">
                <span style="color: #28a745; font-weight: 500;">💰 ${priceSymbols}</span>
            </div>
        ` : '';


        infoDiv.innerHTML = `
            <div style="margin-bottom: 8px;">
                <strong style="font-size: 18px; color: #333; display: block; margin-bottom: 4px;">${place.name}</strong>
                <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                    <span style="color: #ffc107; font-weight: 500;">⭐ ${place.rating.toFixed(1)}</span>
                    <span style="color: #666; font-size: 14px;">(${place.user_ratings_total.toLocaleString()} reviews)</span>
                    ${priceDisplay}
                </div>
            </div>
            <div style="color: #999; font-size: 14px;">
                📍 ${place.vicinity || place.formatted_address || 'Location available'}
            </div>
        `;

        header.appendChild(imageContainer);
        header.appendChild(infoDiv);

        details.classList.add("activity-details");
        details.style.cssText = `
            display: none;
            padding: 20px;
            border-top: 1px solid #eee;
            background: #f8f9fa;
            font-size: 14px;
        `;
        details.innerHTML = `
            <div style="text-align: center; color: #666; padding: 20px;">
                <div style="font-size: 20px; margin-bottom: 10px;">⏳</div>
                <em>Loading detailed information...</em>
            </div>
        `;

        // Enhanced add button for search results
        const addBtn = document.createElement("button");
        addBtn.innerHTML = "➕";
        addBtn.title = "Add to schedule";
        addBtn.style.cssText = `
            position: absolute;
            bottom: 15px;
            right: 15px;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            font-size: 16px;
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        `;

        // Hide button if schedule dates are not valid
        if (!hasValidScheduleDates) {
            addBtn.style.display = "none";
        }

        addBtn.addEventListener('mouseenter', () => {
            addBtn.style.transform = 'scale(1.1)';
            addBtn.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.4)';
        });
        addBtn.addEventListener('mouseleave', () => {
            addBtn.style.transform = 'scale(1)';
            addBtn.style.boxShadow = '0 2px 8px rgba(40, 167, 69, 0.3)';
        });

        addBtn.onclick = (e) => {
            e.stopPropagation();
            const targetHour = selectedSlot ? +selectedSlot.dataset.hour : 8;

            // Determine type for scheduling
            const placeTypes = place.types || [];
            let scheduleType = "restaurant"; // default
            if (placeTypes.includes('restaurant') || placeTypes.includes('food')) {
                scheduleType = "restaurant";
            } else if (placeTypes.includes('lodging')) {
                scheduleType = "hotel";
            } else if (placeTypes.includes('park')) {
                scheduleType = "park";
            } else if (placeTypes.includes('museum')) {
                scheduleType = "museum";
            } else if (placeTypes.includes('shopping_mall') || placeTypes.includes('store')) {
                scheduleType = "shopping_mall";
            }

            addEvent(place.name, scheduleType, targetHour, place.place_id);

            // Visual feedback
            addBtn.innerHTML = "✓";
            addBtn.style.background = "linear-gradient(135deg, #28a745 0%, #20c997 100%)";
            setTimeout(() => {
                addBtn.innerHTML = "➕";
            }, 1000);
        };

        header.appendChild(addBtn);
        item.append(header, details);
        targetPane.appendChild(item);

        // Load image using the fast image loader
        const photoUrl = place.photos && place.photos.length > 0
            ? getOptimizedPhotoUrl(place.photos[0], 100)
            : null;

        imageLoader.addToQueue(
            photoUrl,
            place.name,
            place.geometry.location,
            imageContainer,
            100
        );

        // Set fallback type for better icons (search type)
        setTimeout(() => {
            if (!photoUrl || imageContainer.querySelector('img') === null) {
                imageLoader.createFallbackImage(place.name, imageContainer, 100, 'search');
            }
        }, 3000);

        // Fetch full details (reuse the same function)
        loadPlaceDetails(place, details, svc);
    }
        // toggle details helper
    window.toggleDetails = function (header) {
        document.querySelectorAll(".activity-details").forEach(d => { if (d !== header.nextSibling) d.style.display = "none"; });
        const det = header.nextSibling;
        det.style.display = det.style.display === "none" ? "block" : "none";
    };

    // ======================================================
    // DAY NAVIGATION & SAVE
    // ======================================================
    document.getElementById("prevDayBtn").addEventListener("click", function () {
        let newDate = new Date(currentDate);
        newDate.setDate(newDate.getDate() - 1);
        const scheduleStartDate = new Date(scheduleDate);
        if (newDate >= scheduleStartDate) {
            currentDate = newDate;
            updateCalendarForCurrentDate();
        } else {
            alert("You have reached the beginning of the schedule.");
        }
    });

    document.getElementById("nextDayBtn").addEventListener("click", function () {
        let newDate = new Date(currentDate);
        newDate.setDate(newDate.getDate() + 1);
        if (newDate <= scheduleEndDate) {
            currentDate = newDate;
            updateCalendarForCurrentDate();
        } else {
            alert("You have reached the end of the schedule.");
        }
    });

    // Call the check function when page loads
        window.addEventListener("load", function() {
        const hasDefaultDates = checkScheduleDates();

        if (!hasDefaultDates) {
            // Only update calendar if we have valid dates
            updateCalendarForCurrentDate();

            // ADD THIS: Scroll to 8AM after calendar is loaded
            setTimeout(() => {
                const scrollTo = (defaultScrollStart - fullStartHour) * slotHeight; // (8-1)*60 = 420px
                hourSlotsScroll.scrollTop = scrollTo;
                console.log(`Scrolled calendar to ${scrollTo}px to show 8AM at top`);
            }, 200);
        }

        fetchTopLocations();

        // Make sure to update progress buttons after flowchart is initialized
        setTimeout(updateProgressButtonsVisibility, 100);
    });

    document.getElementById("routeBtn").addEventListener("click", () => {
        if (!events.length) {
            alert("No locations scheduled for today!");
            return;
        }

        // First, sort a copy of events by their start hour/minute
        const sorted = events
            .slice()  // clone so we don’t mutate original
            .sort((a, b) => {
                // a.start and b.start are floats, e.g. 8.5 for 8:30am
                return a.start - b.start;
            });

        // Extract the names in chronological order:
        const names = sorted.map(ev => ev.name);


        // Your hotel name from the Razor model
        const hotelName = "@ViewBag.Schedule.HotelName";
        const encodedHotel = encodeURIComponent(hotelName);

        const waypoints = names
            .filter(name => name !== hotelName)
            .map(name => encodeURIComponent(name))
            .join("|");

        let url = [
            "https://www.google.com/maps/dir/?api=1",
            `origin=${encodedHotel}`,
            `destination=${encodedHotel}`,
            "travelmode=driving"
        ].join("&");

        if (waypoints) {
            url += `&waypoints=${waypoints}`;
        }

        window.open(url, "_blank");
    });
</script>
